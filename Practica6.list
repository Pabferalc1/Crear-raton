
Practica6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08008780  08008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008828  08008828  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08008828  08008828  00018828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008830  08008830  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008834  08008834  00018834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08008838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b60  20000184  080089bc  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ce4  080089bc  00020ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f9ea  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ba8  00000000  00000000  0003fb9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018e0  00000000  00000000  00043748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001718  00000000  00000000  00045028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002aba1  00000000  00000000  00046740  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015ac2  00000000  00000000  000712e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4802  00000000  00000000  00086da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017b5a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068dc  00000000  00000000  0017b620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008768 	.word	0x08008768

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	08008768 	.word	0x08008768

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fe44 	bl	800115a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f841 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fa1d 	bl	8000914 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004da:	f000 f8e1 	bl	80006a0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004de:	f000 f917 	bl	8000710 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004e2:	f000 f953 	bl	800078c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e6:	f000 f977 	bl	80007d8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004ea:	f000 f9b3 	bl	8000854 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004ee:	f000 f9e1 	bl	80008b4 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80004f2:	f007 fb73 	bl	8007bdc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(5000); //retraso para esperar a que el USB se configure
 80004f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80004fa:	f000 fe9f 	bl	800123c <HAL_Delay>
   dato[0]=0; //estos son los tres botones, ninguno pulsado
 80004fe:	2300      	movs	r3, #0
 8000500:	703b      	strb	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for (i=0;i<50;i++){
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	e00e      	b.n	8000526 <main+0x5e>

		  dato[1]=4; //cada 100ms desplazamos el ratón 4 posiciones
 8000508:	2304      	movs	r3, #4
 800050a:	707b      	strb	r3, [r7, #1]
		  dato[2]=4;
 800050c:	2304      	movs	r3, #4
 800050e:	70bb      	strb	r3, [r7, #2]
		  USBD_CUSTOM_HID_SendReport_FS(dato,3);
 8000510:	463b      	mov	r3, r7
 8000512:	2103      	movs	r1, #3
 8000514:	4618      	mov	r0, r3
 8000516:	f007 fbb1 	bl	8007c7c <USBD_CUSTOM_HID_SendReport_FS>
		  HAL_Delay(100);
 800051a:	2064      	movs	r0, #100	; 0x64
 800051c:	f000 fe8e 	bl	800123c <HAL_Delay>
	  for (i=0;i<50;i++){
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3301      	adds	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b31      	cmp	r3, #49	; 0x31
 800052a:	dded      	ble.n	8000508 <main+0x40>
	   }
	   for (i=0;i<50;i++){
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	e00e      	b.n	8000550 <main+0x88>
		  dato[1]=-4;
 8000532:	23fc      	movs	r3, #252	; 0xfc
 8000534:	707b      	strb	r3, [r7, #1]
		  dato[2]=-4;
 8000536:	23fc      	movs	r3, #252	; 0xfc
 8000538:	70bb      	strb	r3, [r7, #2]
		  USBD_CUSTOM_HID_SendReport_FS(dato,3);
 800053a:	463b      	mov	r3, r7
 800053c:	2103      	movs	r1, #3
 800053e:	4618      	mov	r0, r3
 8000540:	f007 fb9c 	bl	8007c7c <USBD_CUSTOM_HID_SendReport_FS>
		  HAL_Delay(100);
 8000544:	2064      	movs	r0, #100	; 0x64
 8000546:	f000 fe79 	bl	800123c <HAL_Delay>
	   for (i=0;i<50;i++){
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3301      	adds	r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2b31      	cmp	r3, #49	; 0x31
 8000554:	dded      	ble.n	8000532 <main+0x6a>
	  for (i=0;i<50;i++){
 8000556:	e7d4      	b.n	8000502 <main+0x3a>

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b0b8      	sub	sp, #224	; 0xe0
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000562:	2244      	movs	r2, #68	; 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f008 f8f6 	bl	8008758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057c:	463b      	mov	r3, r7
 800057e:	2288      	movs	r2, #136	; 0x88
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f008 f8e8 	bl	8008758 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000588:	f002 fc28 	bl	8002ddc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800058c:	4b42      	ldr	r3, [pc, #264]	; (8000698 <SystemClock_Config+0x140>)
 800058e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000592:	4a41      	ldr	r2, [pc, #260]	; (8000698 <SystemClock_Config+0x140>)
 8000594:	f023 0318 	bic.w	r3, r3, #24
 8000598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800059c:	2314      	movs	r3, #20
 800059e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005a2:	2301      	movs	r3, #1
 80005a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b4:	2360      	movs	r3, #96	; 0x60
 80005b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c0:	2301      	movs	r3, #1
 80005c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005cc:	2328      	movs	r3, #40	; 0x28
 80005ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d2:	2307      	movs	r3, #7
 80005d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fd43 	bl	8003074 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005f4:	f000 fb3e 	bl	8000c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2303      	movs	r3, #3
 8000600:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000616:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800061a:	2104      	movs	r1, #4
 800061c:	4618      	mov	r0, r3
 800061e:	f003 f90f 	bl	8003840 <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000628:	f000 fb24 	bl	8000c74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <SystemClock_Config+0x144>)
 800062e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000630:	2300      	movs	r3, #0
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000634:	2300      	movs	r3, #0
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000638:	2300      	movs	r3, #0
 800063a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800063c:	2300      	movs	r3, #0
 800063e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000642:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000646:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000648:	2301      	movs	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800064c:	2301      	movs	r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000650:	2318      	movs	r3, #24
 8000652:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000654:	2307      	movs	r3, #7
 8000656:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000660:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000664:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4618      	mov	r0, r3
 800066a:	f003 faed 	bl	8003c48 <HAL_RCCEx_PeriphCLKConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000674:	f000 fafe 	bl	8000c74 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000678:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067c:	f002 fbcc 	bl	8002e18 <HAL_PWREx_ControlVoltageScaling>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000686:	f000 faf5 	bl	8000c74 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800068a:	f003 fdc3 	bl	8004214 <HAL_RCCEx_EnableMSIPLLMode>
}
 800068e:	bf00      	nop
 8000690:	37e0      	adds	r7, #224	; 0xe0
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	00012085 	.word	0x00012085

080006a0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006a6:	4a19      	ldr	r2, [pc, #100]	; (800070c <MX_DFSDM1_Init+0x6c>)
 80006a8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006b8:	2202      	movs	r2, #2
 80006ba:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ce:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006d8:	2204      	movs	r2, #4
 80006da:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_DFSDM1_Init+0x68>)
 80006f6:	f000 fed5 	bl	80014a4 <HAL_DFSDM_ChannelInit>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000700:	f000 fab8 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200001e8 	.word	0x200001e8
 800070c:	40016020 	.word	0x40016020

08000710 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_I2C2_Init+0x74>)
 8000716:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <MX_I2C2_Init+0x78>)
 8000718:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_I2C2_Init+0x74>)
 800071c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000720:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_I2C2_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_I2C2_Init+0x74>)
 800072a:	2201      	movs	r2, #1
 800072c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_I2C2_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_I2C2_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_I2C2_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_I2C2_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_I2C2_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <MX_I2C2_Init+0x74>)
 800074e:	f001 f998 	bl	8001a82 <HAL_I2C_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000758:	f000 fa8c 	bl	8000c74 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4809      	ldr	r0, [pc, #36]	; (8000784 <MX_I2C2_Init+0x74>)
 8000760:	f001 fa1e 	bl	8001ba0 <HAL_I2CEx_ConfigAnalogFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800076a:	f000 fa83 	bl	8000c74 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800076e:	2100      	movs	r1, #0
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_I2C2_Init+0x74>)
 8000772:	f001 fa60 	bl	8001c36 <HAL_I2CEx_ConfigDigitalFilter>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800077c:	f000 fa7a 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200002a0 	.word	0x200002a0
 8000788:	40005800 	.word	0x40005800

0800078c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_QUADSPI_Init+0x44>)
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <MX_QUADSPI_Init+0x48>)
 8000794:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_QUADSPI_Init+0x44>)
 8000798:	22ff      	movs	r2, #255	; 0xff
 800079a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_QUADSPI_Init+0x44>)
 800079e:	2201      	movs	r2, #1
 80007a0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_QUADSPI_Init+0x44>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_QUADSPI_Init+0x44>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_QUADSPI_Init+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_QUADSPI_Init+0x44>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_QUADSPI_Init+0x44>)
 80007bc:	f002 fb92 	bl	8002ee4 <HAL_QSPI_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007c6:	f000 fa55 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200003d0 	.word	0x200003d0
 80007d4:	a0001000 	.word	0xa0001000

080007d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_SPI3_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_SPI3_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_SPI3_Init+0x74>)
 80007e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_SPI3_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI3_Init+0x74>)
 80007f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI3_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_SPI3_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI3_Init+0x74>)
 8000806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI3_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI3_Init+0x74>)
 8000826:	2207      	movs	r2, #7
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_SPI3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI3_Init+0x74>)
 8000832:	2208      	movs	r2, #8
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_SPI3_Init+0x74>)
 8000838:	f003 fec6 	bl	80045c8 <HAL_SPI_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 fa17 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200002ec 	.word	0x200002ec
 8000850:	40003c00 	.word	0x40003c00

08000854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800085a:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <MX_USART1_UART_Init+0x5c>)
 800085c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART1_UART_Init+0x58>)
 8000898:	f003 ff20 	bl	80046dc <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 f9e7 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000350 	.word	0x20000350
 80008b0:	40013800 	.word	0x40013800

080008b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <MX_USART3_UART_Init+0x5c>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART3_UART_Init+0x58>)
 80008f8:	f003 fef0 	bl	80046dc <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000902:	f000 f9b7 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000220 	.word	0x20000220
 8000910:	40004800 	.word	0x40004800

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092a:	4bba      	ldr	r3, [pc, #744]	; (8000c14 <MX_GPIO_Init+0x300>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4ab9      	ldr	r2, [pc, #740]	; (8000c14 <MX_GPIO_Init+0x300>)
 8000930:	f043 0310 	orr.w	r3, r3, #16
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4bb7      	ldr	r3, [pc, #732]	; (8000c14 <MX_GPIO_Init+0x300>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0310 	and.w	r3, r3, #16
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4bb4      	ldr	r3, [pc, #720]	; (8000c14 <MX_GPIO_Init+0x300>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4ab3      	ldr	r2, [pc, #716]	; (8000c14 <MX_GPIO_Init+0x300>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4bb1      	ldr	r3, [pc, #708]	; (8000c14 <MX_GPIO_Init+0x300>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4bae      	ldr	r3, [pc, #696]	; (8000c14 <MX_GPIO_Init+0x300>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4aad      	ldr	r2, [pc, #692]	; (8000c14 <MX_GPIO_Init+0x300>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4bab      	ldr	r3, [pc, #684]	; (8000c14 <MX_GPIO_Init+0x300>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4ba8      	ldr	r3, [pc, #672]	; (8000c14 <MX_GPIO_Init+0x300>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4aa7      	ldr	r2, [pc, #668]	; (8000c14 <MX_GPIO_Init+0x300>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4ba5      	ldr	r3, [pc, #660]	; (8000c14 <MX_GPIO_Init+0x300>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	4ba2      	ldr	r3, [pc, #648]	; (8000c14 <MX_GPIO_Init+0x300>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4aa1      	ldr	r2, [pc, #644]	; (8000c14 <MX_GPIO_Init+0x300>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b9f      	ldr	r3, [pc, #636]	; (8000c14 <MX_GPIO_Init+0x300>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80009a8:	489b      	ldr	r0, [pc, #620]	; (8000c18 <MX_GPIO_Init+0x304>)
 80009aa:	f001 f82f 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f248 1104 	movw	r1, #33028	; 0x8104
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f001 f828 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80009bc:	2200      	movs	r2, #0
 80009be:	f24f 0114 	movw	r1, #61460	; 0xf014
 80009c2:	4896      	ldr	r0, [pc, #600]	; (8000c1c <MX_GPIO_Init+0x308>)
 80009c4:	f001 f822 	bl	8001a0c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f241 0181 	movw	r1, #4225	; 0x1081
 80009ce:	4894      	ldr	r0, [pc, #592]	; (8000c20 <MX_GPIO_Init+0x30c>)
 80009d0:	f001 f81c 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009da:	4891      	ldr	r0, [pc, #580]	; (8000c20 <MX_GPIO_Init+0x30c>)
 80009dc:	f001 f816 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80009e6:	488f      	ldr	r0, [pc, #572]	; (8000c24 <MX_GPIO_Init+0x310>)
 80009e8:	f001 f810 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2120      	movs	r1, #32
 80009f0:	488a      	ldr	r0, [pc, #552]	; (8000c1c <MX_GPIO_Init+0x308>)
 80009f2:	f001 f80b 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2101      	movs	r1, #1
 80009fa:	4887      	ldr	r0, [pc, #540]	; (8000c18 <MX_GPIO_Init+0x304>)
 80009fc:	f001 f806 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a00:	f240 1315 	movw	r3, #277	; 0x115
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	487f      	ldr	r0, [pc, #508]	; (8000c18 <MX_GPIO_Init+0x304>)
 8000a1a:	f000 fe4f 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a1e:	236a      	movs	r3, #106	; 0x6a
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a22:	4b81      	ldr	r3, [pc, #516]	; (8000c28 <MX_GPIO_Init+0x314>)
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4879      	ldr	r0, [pc, #484]	; (8000c18 <MX_GPIO_Init+0x304>)
 8000a32:	f000 fe43 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3c:	4b7b      	ldr	r3, [pc, #492]	; (8000c2c <MX_GPIO_Init+0x318>)
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4876      	ldr	r0, [pc, #472]	; (8000c24 <MX_GPIO_Init+0x310>)
 8000a4c:	f000 fe36 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8000a50:	233f      	movs	r3, #63	; 0x3f
 8000a52:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a54:	230b      	movs	r3, #11
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4870      	ldr	r0, [pc, #448]	; (8000c24 <MX_GPIO_Init+0x310>)
 8000a64:	f000 fe2a 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f000 fe19 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a8a:	f248 1304 	movw	r3, #33028	; 0x8104
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f000 fe09 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000aaa:	2308      	movs	r3, #8
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aba:	2301      	movs	r3, #1
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f000 fdf8 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000acc:	2310      	movs	r3, #16
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ad0:	230b      	movs	r3, #11
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f000 fdeb 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000ae6:	23e0      	movs	r3, #224	; 0xe0
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000af6:	2305      	movs	r3, #5
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f000 fdda 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	4b46      	ldr	r3, [pc, #280]	; (8000c28 <MX_GPIO_Init+0x314>)
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4840      	ldr	r0, [pc, #256]	; (8000c1c <MX_GPIO_Init+0x308>)
 8000b1c:	f000 fdce 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b20:	2302      	movs	r3, #2
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b24:	230b      	movs	r3, #11
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	483a      	ldr	r0, [pc, #232]	; (8000c1c <MX_GPIO_Init+0x308>)
 8000b34:	f000 fdc2 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000b38:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000b3c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4832      	ldr	r0, [pc, #200]	; (8000c1c <MX_GPIO_Init+0x308>)
 8000b52:	f000 fdb3 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8000b56:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b5a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5c:	4b32      	ldr	r3, [pc, #200]	; (8000c28 <MX_GPIO_Init+0x314>)
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	482d      	ldr	r0, [pc, #180]	; (8000c20 <MX_GPIO_Init+0x30c>)
 8000b6c:	f000 fda6 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b70:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4825      	ldr	r0, [pc, #148]	; (8000c20 <MX_GPIO_Init+0x30c>)
 8000b8a:	f000 fd97 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b8e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	481f      	ldr	r0, [pc, #124]	; (8000c24 <MX_GPIO_Init+0x310>)
 8000ba8:	f000 fd88 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000bac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_GPIO_Init+0x314>)
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4818      	ldr	r0, [pc, #96]	; (8000c24 <MX_GPIO_Init+0x310>)
 8000bc2:	f000 fd7b 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	480f      	ldr	r0, [pc, #60]	; (8000c20 <MX_GPIO_Init+0x30c>)
 8000be2:	f000 fd6b 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000be6:	2378      	movs	r3, #120	; 0x78
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4807      	ldr	r0, [pc, #28]	; (8000c20 <MX_GPIO_Init+0x30c>)
 8000c02:	f000 fd5b 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0c:	2312      	movs	r3, #18
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e00d      	b.n	8000c30 <MX_GPIO_Init+0x31c>
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48001000 	.word	0x48001000
 8000c1c:	48000400 	.word	0x48000400
 8000c20:	48000c00 	.word	0x48000c00
 8000c24:	48000800 	.word	0x48000800
 8000c28:	10110000 	.word	0x10110000
 8000c2c:	10210000 	.word	0x10210000
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c36:	2304      	movs	r3, #4
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <MX_GPIO_Init+0x35c>)
 8000c42:	f000 fd3b 	bl	80016bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2017      	movs	r0, #23
 8000c4c:	f000 fbf3 	bl	8001436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c50:	2017      	movs	r0, #23
 8000c52:	f000 fc0c 	bl	800146e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2028      	movs	r0, #40	; 0x28
 8000c5c:	f000 fbeb 	bl	8001436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c60:	2028      	movs	r0, #40	; 0x28
 8000c62:	f000 fc04 	bl	800146e <HAL_NVIC_EnableIRQ>

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	48000400 	.word	0x48000400

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6613      	str	r3, [r2, #96]	; 0x60
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x44>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x44>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6593      	str	r3, [r2, #88]	; 0x58
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x44>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d128      	bne.n	8000d3e <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_DFSDM_ChannelMspInit+0x80>)
 8000cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf0:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <HAL_DFSDM_ChannelMspInit+0x80>)
 8000cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cf6:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_DFSDM_ChannelMspInit+0x80>)
 8000cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_DFSDM_ChannelMspInit+0x80>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <HAL_DFSDM_ChannelMspInit+0x80>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_DFSDM_ChannelMspInit+0x80>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d14:	f003 0310 	and.w	r3, r3, #16
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000d1c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d2e:	2306      	movs	r3, #6
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000d3a:	f000 fcbf 	bl	80016bc <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200001a0 	.word	0x200001a0
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	48001000 	.word	0x48001000

08000d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <HAL_I2C_MspInit+0x7c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d128      	bne.n	8000dc8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_I2C_MspInit+0x80>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <HAL_I2C_MspInit+0x80>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_I2C_MspInit+0x80>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000d8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d94:	2312      	movs	r3, #18
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000da0:	2304      	movs	r3, #4
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <HAL_I2C_MspInit+0x84>)
 8000dac:	f000 fc86 	bl	80016bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_I2C_MspInit+0x80>)
 8000db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_I2C_MspInit+0x80>)
 8000db6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dba:	6593      	str	r3, [r2, #88]	; 0x58
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_I2C_MspInit+0x80>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40005800 	.word	0x40005800
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	48000400 	.word	0x48000400

08000ddc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <HAL_QSPI_MspInit+0x7c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d128      	bne.n	8000e50 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_QSPI_MspInit+0x80>)
 8000e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e02:	4a16      	ldr	r2, [pc, #88]	; (8000e5c <HAL_QSPI_MspInit+0x80>)
 8000e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e08:	6513      	str	r3, [r2, #80]	; 0x50
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_QSPI_MspInit+0x80>)
 8000e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_QSPI_MspInit+0x80>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <HAL_QSPI_MspInit+0x80>)
 8000e1c:	f043 0310 	orr.w	r3, r3, #16
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_QSPI_MspInit+0x80>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0310 	and.w	r3, r3, #16
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8000e2e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e32:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e40:	230a      	movs	r3, #10
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_QSPI_MspInit+0x84>)
 8000e4c:	f000 fc36 	bl	80016bc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	a0001000 	.word	0xa0001000
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	48001000 	.word	0x48001000

08000e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <HAL_SPI_MspInit+0x7c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d128      	bne.n	8000ed8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_SPI_MspInit+0x80>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8a:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <HAL_SPI_MspInit+0x80>)
 8000e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e90:	6593      	str	r3, [r2, #88]	; 0x58
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_SPI_MspInit+0x80>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_SPI_MspInit+0x80>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <HAL_SPI_MspInit+0x80>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_SPI_MspInit+0x80>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000eb6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ec8:	2306      	movs	r3, #6
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <HAL_SPI_MspInit+0x84>)
 8000ed4:	f000 fbf2 	bl	80016bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40003c00 	.word	0x40003c00
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	48000800 	.word	0x48000800

08000eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a2e      	ldr	r2, [pc, #184]	; (8000fc4 <HAL_UART_MspInit+0xd8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d128      	bne.n	8000f60 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <HAL_UART_MspInit+0xdc>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	4a2d      	ldr	r2, [pc, #180]	; (8000fc8 <HAL_UART_MspInit+0xdc>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f18:	6613      	str	r3, [r2, #96]	; 0x60
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <HAL_UART_MspInit+0xdc>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_UART_MspInit+0xdc>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <HAL_UART_MspInit+0xdc>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <HAL_UART_MspInit+0xdc>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000f3e:	23c0      	movs	r3, #192	; 0xc0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	481c      	ldr	r0, [pc, #112]	; (8000fcc <HAL_UART_MspInit+0xe0>)
 8000f5a:	f000 fbaf 	bl	80016bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f5e:	e02d      	b.n	8000fbc <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1a      	ldr	r2, [pc, #104]	; (8000fd0 <HAL_UART_MspInit+0xe4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d128      	bne.n	8000fbc <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_UART_MspInit+0xdc>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <HAL_UART_MspInit+0xdc>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f74:	6593      	str	r3, [r2, #88]	; 0x58
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_UART_MspInit+0xdc>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_UART_MspInit+0xdc>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_UART_MspInit+0xdc>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_UART_MspInit+0xdc>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000f9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fac:	2307      	movs	r3, #7
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <HAL_UART_MspInit+0xe8>)
 8000fb8:	f000 fb80 	bl	80016bc <HAL_GPIO_Init>
}
 8000fbc:	bf00      	nop
 8000fbe:	3730      	adds	r7, #48	; 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40013800 	.word	0x40013800
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	40004800 	.word	0x40004800
 8000fd4:	48000c00 	.word	0x48000c00

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler+0x4>

08000ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800102c:	f000 f8e8 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001038:	2020      	movs	r0, #32
 800103a:	f000 fcff 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800103e:	2040      	movs	r0, #64	; 0x40
 8001040:	f000 fcfc 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001044:	2080      	movs	r0, #128	; 0x80
 8001046:	f000 fcf9 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800104a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800104e:	f000 fcf5 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}

08001056 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800105a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800105e:	f000 fced 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001062:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001066:	f000 fce9 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800106a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800106e:	f000 fce5 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001072:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001076:	f000 fce1 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800107a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800107e:	f000 fcdd 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <OTG_FS_IRQHandler+0x10>)
 800108e:	f000 ff71 	bl	8001f74 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200008dc 	.word	0x200008dc

0800109c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <SystemInit+0x64>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a6:	4a16      	ldr	r2, [pc, #88]	; (8001100 <SystemInit+0x64>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <SystemInit+0x68>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a13      	ldr	r2, [pc, #76]	; (8001104 <SystemInit+0x68>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <SystemInit+0x68>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <SystemInit+0x68>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <SystemInit+0x68>)
 80010c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <SystemInit+0x68>)
 80010d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <SystemInit+0x68>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a09      	ldr	r2, [pc, #36]	; (8001104 <SystemInit+0x68>)
 80010e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <SystemInit+0x68>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SystemInit+0x64>)
 80010ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010f2:	609a      	str	r2, [r3, #8]
#endif
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00
 8001104:	40021000 	.word	0x40021000

08001108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001140 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800110c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800110e:	e003      	b.n	8001118 <LoopCopyDataInit>

08001110 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001112:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001114:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001116:	3104      	adds	r1, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <LoopForever+0xa>)
	ldr	r3, =_edata
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <LoopForever+0xe>)
	adds	r2, r0, r1
 800111c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800111e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001120:	d3f6      	bcc.n	8001110 <CopyDataInit>
	ldr	r2, =_sbss
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001124:	e002      	b.n	800112c <LoopFillZerobss>

08001126 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001126:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001128:	f842 3b04 	str.w	r3, [r2], #4

0800112c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <LoopForever+0x16>)
	cmp	r2, r3
 800112e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001130:	d3f9      	bcc.n	8001126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001132:	f7ff ffb3 	bl	800109c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001136:	f007 faeb 	bl	8008710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113a:	f7ff f9c5 	bl	80004c8 <main>

0800113e <LoopForever>:

LoopForever:
    b LoopForever
 800113e:	e7fe      	b.n	800113e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001140:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001144:	08008838 	.word	0x08008838
	ldr	r0, =_sdata
 8001148:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800114c:	20000184 	.word	0x20000184
	ldr	r2, =_sbss
 8001150:	20000184 	.word	0x20000184
	ldr	r3, = _ebss
 8001154:	20000ce4 	.word	0x20000ce4

08001158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>

0800115a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f95b 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f80e 	bl	800118c <HAL_InitTick>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	e001      	b.n	8001180 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800117c:	f7ff fd82 	bl	8000c84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001180:	79fb      	ldrb	r3, [r7, #7]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_InitTick+0x68>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d022      	beq.n	80011e6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_InitTick+0x6c>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_InitTick+0x68>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80011b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f968 	bl	800148a <HAL_SYSTICK_Config>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10f      	bne.n	80011e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	d809      	bhi.n	80011da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c6:	2200      	movs	r2, #0
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	f04f 30ff 	mov.w	r0, #4294967295
 80011ce:	f000 f932 	bl	8001436 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_InitTick+0x70>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	e007      	b.n	80011ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	e004      	b.n	80011ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e001      	b.n	80011ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000004 	.word	0x20000004

08001200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_IncTick+0x1c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_IncTick+0x20>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4413      	add	r3, r2
 800120e:	4a03      	ldr	r2, [pc, #12]	; (800121c <HAL_IncTick+0x1c>)
 8001210:	6013      	str	r3, [r2, #0]
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	20000414 	.word	0x20000414
 8001220:	20000008 	.word	0x20000008

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000414 	.word	0x20000414

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d004      	beq.n	8001260 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_Delay+0x40>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001260:	bf00      	nop
 8001262:	f7ff ffdf 	bl	8001224 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	429a      	cmp	r2, r3
 8001270:	d8f7      	bhi.n	8001262 <HAL_Delay+0x26>
  {
  }
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <__NVIC_EnableIRQ+0x38>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff29 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff3e 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff8e 	bl	8001374 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5d 	bl	8001320 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff31 	bl	80012e4 <__NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffa2 	bl	80013dc <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e0ac      	b.n	8001610 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f8b2 	bl	8001624 <DFSDM_GetChannelFromInstance>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b55      	ldr	r3, [pc, #340]	; (8001618 <HAL_DFSDM_ChannelInit+0x174>)
 80014c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e09f      	b.n	8001610 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff fbfb 	bl	8000ccc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80014d6:	4b51      	ldr	r3, [pc, #324]	; (800161c <HAL_DFSDM_ChannelInit+0x178>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	4a4f      	ldr	r2, [pc, #316]	; (800161c <HAL_DFSDM_ChannelInit+0x178>)
 80014de:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80014e0:	4b4e      	ldr	r3, [pc, #312]	; (800161c <HAL_DFSDM_ChannelInit+0x178>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d125      	bne.n	8001534 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80014e8:	4b4d      	ldr	r3, [pc, #308]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a4c      	ldr	r2, [pc, #304]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 80014ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80014f2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80014f4:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	4948      	ldr	r1, [pc, #288]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a46      	ldr	r2, [pc, #280]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 8001508:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800150c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	791b      	ldrb	r3, [r3, #4]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d108      	bne.n	8001528 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001516:	4b42      	ldr	r3, [pc, #264]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	3b01      	subs	r3, #1
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	493f      	ldr	r1, [pc, #252]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001528:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a3c      	ldr	r2, [pc, #240]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 800152e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001532:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001542:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001552:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001558:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 020f 	bic.w	r2, r2, #15
 8001570:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6819      	ldr	r1, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001598:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6899      	ldr	r1, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	3b01      	subs	r3, #1
 80015aa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f002 0207 	and.w	r2, r2, #7
 80015c4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015f0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f810 	bl	8001624 <DFSDM_GetChannelFromInstance>
 8001604:	4601      	mov	r1, r0
 8001606:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_DFSDM_ChannelInit+0x174>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200001a8 	.word	0x200001a8
 800161c:	200001a4 	.word	0x200001a4
 8001620:	40016000 	.word	0x40016000

08001624 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <DFSDM_GetChannelFromInstance+0x7c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d102      	bne.n	800163a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e02b      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <DFSDM_GetChannelFromInstance+0x80>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d102      	bne.n	8001648 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001642:	2301      	movs	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e024      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <DFSDM_GetChannelFromInstance+0x84>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d102      	bne.n	8001656 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001650:	2302      	movs	r3, #2
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	e01d      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <DFSDM_GetChannelFromInstance+0x88>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d102      	bne.n	8001664 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800165e:	2304      	movs	r3, #4
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e016      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <DFSDM_GetChannelFromInstance+0x8c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d102      	bne.n	8001672 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800166c:	2305      	movs	r3, #5
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e00f      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <DFSDM_GetChannelFromInstance+0x90>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d102      	bne.n	8001680 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800167a:	2306      	movs	r3, #6
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	e008      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <DFSDM_GetChannelFromInstance+0x94>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d102      	bne.n	800168e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001688:	2307      	movs	r3, #7
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e001      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800168e:	2303      	movs	r3, #3
 8001690:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40016000 	.word	0x40016000
 80016a4:	40016020 	.word	0x40016020
 80016a8:	40016040 	.word	0x40016040
 80016ac:	40016080 	.word	0x40016080
 80016b0:	400160a0 	.word	0x400160a0
 80016b4:	400160c0 	.word	0x400160c0
 80016b8:	400160e0 	.word	0x400160e0

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ca:	e17f      	b.n	80019cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8171 	beq.w	80019c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d00b      	beq.n	8001704 <HAL_GPIO_Init+0x48>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d007      	beq.n	8001704 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f8:	2b11      	cmp	r3, #17
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b12      	cmp	r3, #18
 8001702:	d130      	bne.n	8001766 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800173a:	2201      	movs	r2, #1
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	f003 0201 	and.w	r2, r3, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b03      	cmp	r3, #3
 8001770:	d118      	bne.n	80017a4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001778:	2201      	movs	r2, #1
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	08db      	lsrs	r3, r3, #3
 800178e:	f003 0201 	and.w	r2, r3, #1
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x128>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b12      	cmp	r3, #18
 80017e2:	d123      	bne.n	800182c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	08da      	lsrs	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3208      	adds	r2, #8
 8001826:	6939      	ldr	r1, [r7, #16]
 8001828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0203 	and.w	r2, r3, #3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80ac 	beq.w	80019c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <HAL_GPIO_Init+0x32c>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	4a5d      	ldr	r2, [pc, #372]	; (80019e8 <HAL_GPIO_Init+0x32c>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6613      	str	r3, [r2, #96]	; 0x60
 800187a:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <HAL_GPIO_Init+0x32c>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001886:	4a59      	ldr	r2, [pc, #356]	; (80019ec <HAL_GPIO_Init+0x330>)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018b0:	d025      	beq.n	80018fe <HAL_GPIO_Init+0x242>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4e      	ldr	r2, [pc, #312]	; (80019f0 <HAL_GPIO_Init+0x334>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d01f      	beq.n	80018fa <HAL_GPIO_Init+0x23e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4d      	ldr	r2, [pc, #308]	; (80019f4 <HAL_GPIO_Init+0x338>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d019      	beq.n	80018f6 <HAL_GPIO_Init+0x23a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	; (80019f8 <HAL_GPIO_Init+0x33c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d013      	beq.n	80018f2 <HAL_GPIO_Init+0x236>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4b      	ldr	r2, [pc, #300]	; (80019fc <HAL_GPIO_Init+0x340>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00d      	beq.n	80018ee <HAL_GPIO_Init+0x232>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4a      	ldr	r2, [pc, #296]	; (8001a00 <HAL_GPIO_Init+0x344>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_Init+0x22e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a49      	ldr	r2, [pc, #292]	; (8001a04 <HAL_GPIO_Init+0x348>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_GPIO_Init+0x22a>
 80018e2:	2306      	movs	r3, #6
 80018e4:	e00c      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018e6:	2307      	movs	r3, #7
 80018e8:	e00a      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018ea:	2305      	movs	r3, #5
 80018ec:	e008      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018ee:	2304      	movs	r3, #4
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e004      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018fe:	2300      	movs	r3, #0
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	f002 0203 	and.w	r2, r2, #3
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4093      	lsls	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001910:	4936      	ldr	r1, [pc, #216]	; (80019ec <HAL_GPIO_Init+0x330>)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800191e:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001942:	4a31      	ldr	r2, [pc, #196]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001948:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800196c:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001972:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001996:	4a1c      	ldr	r2, [pc, #112]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019c0:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa22 f303 	lsr.w	r3, r2, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f47f ae78 	bne.w	80016cc <HAL_GPIO_Init+0x10>
  }
}
 80019dc:	bf00      	nop
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000
 80019f0:	48000400 	.word	0x48000400
 80019f4:	48000800 	.word	0x48000800
 80019f8:	48000c00 	.word	0x48000c00
 80019fc:	48001000 	.word	0x48001000
 8001a00:	48001400 	.word	0x48001400
 8001a04:	48001800 	.word	0x48001800
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a1c:	787b      	ldrb	r3, [r7, #1]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f806 	bl	8001a6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e081      	b.n	8001b98 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d106      	bne.n	8001aae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff f953 	bl	8000d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2224      	movs	r2, #36	; 0x24
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0201 	bic.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ad2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d107      	bne.n	8001afc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	e006      	b.n	8001b0a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d104      	bne.n	8001b1c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	ea42 0103 	orr.w	r1, r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	021a      	lsls	r2, r3, #8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69d9      	ldr	r1, [r3, #28]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1a      	ldr	r2, [r3, #32]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0201 	orr.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d138      	bne.n	8001c28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e032      	b.n	8001c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2224      	movs	r2, #36	; 0x24
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6819      	ldr	r1, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	e000      	b.n	8001c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c28:	2302      	movs	r3, #2
  }
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d139      	bne.n	8001cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e033      	b.n	8001cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2224      	movs	r2, #36	; 0x24
 8001c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e000      	b.n	8001cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cc0:	2302      	movs	r3, #2
  }
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd0:	b08f      	sub	sp, #60	; 0x3c
 8001cd2:	af0a      	add	r7, sp, #40	; 0x28
 8001cd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e116      	b.n	8001f0e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f006 f8f2 	bl	8007ee4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2203      	movs	r2, #3
 8001d04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 fafd 	bl	800531e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	687e      	ldr	r6, [r7, #4]
 8001d2c:	466d      	mov	r5, sp
 8001d2e:	f106 0410 	add.w	r4, r6, #16
 8001d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d42:	1d33      	adds	r3, r6, #4
 8001d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d46:	6838      	ldr	r0, [r7, #0]
 8001d48:	f003 f9ea 	bl	8005120 <USB_CoreInit>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0d7      	b.n	8001f0e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 faeb 	bl	8005340 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e04a      	b.n	8001e06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	333d      	adds	r3, #61	; 0x3d
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	333c      	adds	r3, #60	; 0x3c
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	b298      	uxth	r0, r3
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3342      	adds	r3, #66	; 0x42
 8001dac:	4602      	mov	r2, r0
 8001dae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	333f      	adds	r3, #63	; 0x3f
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3344      	adds	r3, #68	; 0x44
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	3348      	adds	r3, #72	; 0x48
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3350      	adds	r3, #80	; 0x50
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	3301      	adds	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d3af      	bcc.n	8001d70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e044      	b.n	8001ea0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	1a9b      	subs	r3, r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	1a9b      	subs	r3, r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d3b5      	bcc.n	8001e16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	687e      	ldr	r6, [r7, #4]
 8001eb2:	466d      	mov	r5, sp
 8001eb4:	f106 0410 	add.w	r4, r6, #16
 8001eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ec8:	1d33      	adds	r3, r6, #4
 8001eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ecc:	6838      	ldr	r0, [r7, #0]
 8001ece:	f003 fa61 	bl	8005394 <USB_DevInit>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e014      	b.n	8001f0e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d102      	bne.n	8001f02 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 ff49 	bl	8002d94 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f004 f9da 	bl	80062c0 <USB_DevDisconnect>

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b084      	sub	sp, #16
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_PCD_Start+0x1c>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e01c      	b.n	8001f6c <HAL_PCD_Start+0x56>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d105      	bne.n	8001f4e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f004 f99c 	bl	8006290 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 f9cd 	bl	80052fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b08d      	sub	sp, #52	; 0x34
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 fa43 	bl	8006416 <USB_GetMode>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 838f 	bne.w	80026b6 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 f9a7 	bl	80062f0 <USB_ReadInterrupts>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8385 	beq.w	80026b4 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 f99e 	bl	80062f0 <USB_ReadInterrupts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d107      	bne.n	8001fce <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f002 0202 	and.w	r2, r2, #2
 8001fcc:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f004 f98c 	bl	80062f0 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b10      	cmp	r3, #16
 8001fe0:	d161      	bne.n	80020a6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699a      	ldr	r2, [r3, #24]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0210 	bic.w	r2, r2, #16
 8001ff0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	f003 020f 	and.w	r2, r3, #15
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	3304      	adds	r3, #4
 8002010:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	0c5b      	lsrs	r3, r3, #17
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	2b02      	cmp	r3, #2
 800201c:	d124      	bne.n	8002068 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d035      	beq.n	8002096 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002034:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	6a38      	ldr	r0, [r7, #32]
 800203e:	f004 f804 	bl	800604a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800204e:	441a      	add	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002060:	441a      	add	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	619a      	str	r2, [r3, #24]
 8002066:	e016      	b.n	8002096 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	0c5b      	lsrs	r3, r3, #17
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	2b06      	cmp	r3, #6
 8002072:	d110      	bne.n	8002096 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800207a:	2208      	movs	r2, #8
 800207c:	4619      	mov	r1, r3
 800207e:	6a38      	ldr	r0, [r7, #32]
 8002080:	f003 ffe3 	bl	800604a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	699a      	ldr	r2, [r3, #24]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002090:	441a      	add	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699a      	ldr	r2, [r3, #24]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0210 	orr.w	r2, r2, #16
 80020a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 f920 	bl	80062f0 <USB_ReadInterrupts>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020ba:	d16e      	bne.n	800219a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f004 f926 	bl	8006316 <USB_ReadDevAllOutEpInterrupt>
 80020ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020cc:	e062      	b.n	8002194 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d057      	beq.n	8002188 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f004 f94b 	bl	800637e <USB_ReadDevOutEPInterrupt>
 80020e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00c      	beq.n	800210e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002100:	461a      	mov	r2, r3
 8002102:	2301      	movs	r3, #1
 8002104:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fd69 	bl	8002be0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00c      	beq.n	8002132 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002124:	461a      	mov	r2, r3
 8002126:	2308      	movs	r3, #8
 8002128:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800212a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fda5 	bl	8002c7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002148:	461a      	mov	r2, r3
 800214a:	2310      	movs	r3, #16
 800214c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002164:	461a      	mov	r2, r3
 8002166:	2320      	movs	r3, #32
 8002168:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d009      	beq.n	8002188 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002180:	461a      	mov	r2, r3
 8002182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002186:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	3301      	adds	r3, #1
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002196:	2b00      	cmp	r3, #0
 8002198:	d199      	bne.n	80020ce <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 f8a6 	bl	80062f0 <USB_ReadInterrupts>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021ae:	f040 8087 	bne.w	80022c0 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 f8c7 	bl	800634a <USB_ReadDevAllInEpInterrupt>
 80021bc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021c2:	e07a      	b.n	80022ba <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d06f      	beq.n	80022ae <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f004 f8ee 	bl	80063ba <USB_ReadDevInEPInterrupt>
 80021de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d020      	beq.n	800222c <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	2201      	movs	r2, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	69f9      	ldr	r1, [r7, #28]
 8002206:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800220a:	4013      	ands	r3, r2
 800220c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221a:	461a      	mov	r2, r3
 800221c:	2301      	movs	r3, #1
 800221e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4619      	mov	r1, r3
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f005 fefd 	bl	8008026 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	4413      	add	r3, r2
 800223e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002242:	461a      	mov	r2, r3
 8002244:	2308      	movs	r3, #8
 8002246:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	4413      	add	r3, r2
 800225a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800225e:	461a      	mov	r2, r3
 8002260:	2310      	movs	r3, #16
 8002262:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d008      	beq.n	8002280 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	4413      	add	r3, r2
 8002276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227a:	461a      	mov	r2, r3
 800227c:	2340      	movs	r3, #64	; 0x40
 800227e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002296:	461a      	mov	r2, r3
 8002298:	2302      	movs	r3, #2
 800229a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 fc11 	bl	8002ad0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	3301      	adds	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b6:	085b      	lsrs	r3, r3, #1
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d181      	bne.n	80021c4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f004 f813 	bl	80062f0 <USB_ReadInterrupts>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022d4:	d122      	bne.n	800231c <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d108      	bne.n	8002306 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022fc:	2100      	movs	r1, #0
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f006 f99a 	bl	8008638 <HAL_PCDEx_LPM_Callback>
 8002304:	e002      	b.n	800230c <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f005 fefa 	bl	8008100 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800231a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f003 ffe5 	bl	80062f0 <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800232c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002330:	d112      	bne.n	8002358 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d102      	bne.n	8002348 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f005 feb6 	bl	80080b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002356:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f003 ffc7 	bl	80062f0 <USB_ReadInterrupts>
 8002362:	4603      	mov	r3, r0
 8002364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800236c:	d121      	bne.n	80023b2 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800237c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d111      	bne.n	80023ac <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	f003 020f 	and.w	r2, r3, #15
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80023a2:	2101      	movs	r1, #1
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f006 f947 	bl	8008638 <HAL_PCDEx_LPM_Callback>
 80023aa:	e002      	b.n	80023b2 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f005 fe81 	bl	80080b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 ff9a 	bl	80062f0 <USB_ReadInterrupts>
 80023bc:	4603      	mov	r3, r0
 80023be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c6:	f040 80c5 	bne.w	8002554 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2110      	movs	r1, #16
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 f921 	bl	800562c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ee:	e056      	b.n	800249e <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023fc:	461a      	mov	r2, r3
 80023fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002402:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	4413      	add	r3, r2
 800240c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002414:	0151      	lsls	r1, r2, #5
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	440a      	add	r2, r1
 800241a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800241e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002422:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002434:	0151      	lsls	r1, r2, #5
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	440a      	add	r2, r1
 800243a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800243e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002442:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002450:	461a      	mov	r2, r3
 8002452:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002456:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002468:	0151      	lsls	r1, r2, #5
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	440a      	add	r2, r1
 800246e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002472:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002476:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002488:	0151      	lsls	r1, r2, #5
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	440a      	add	r2, r1
 800248e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002492:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002496:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249a:	3301      	adds	r3, #1
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d3a3      	bcc.n	80023f0 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80024ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d016      	beq.n	80024f2 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024d4:	f043 030b 	orr.w	r3, r3, #11
 80024d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ea:	f043 030b 	orr.w	r3, r3, #11
 80024ee:	6453      	str	r3, [r2, #68]	; 0x44
 80024f0:	e015      	b.n	800251e <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002500:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002504:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002508:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002518:	f043 030b 	orr.w	r3, r3, #11
 800251c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800252c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002530:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f003 ff9a 	bl	8006478 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002552:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f003 fec9 	bl	80062f0 <USB_ReadInterrupts>
 800255e:	4603      	mov	r3, r0
 8002560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002568:	d124      	bne.n	80025b4 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f003 ff5f 	bl	8006432 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f003 f8b8 	bl	80056ee <USB_GetDevSpeed>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681c      	ldr	r4, [r3, #0]
 800258a:	f001 fac5 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 800258e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002594:	b2db      	uxtb	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	4620      	mov	r0, r4
 800259a:	f002 fe13 	bl	80051c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f005 fd69 	bl	8008076 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 fe99 	bl	80062f0 <USB_ReadInterrupts>
 80025be:	4603      	mov	r3, r0
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d10a      	bne.n	80025de <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f005 fd46 	bl	800805a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f002 0208 	and.w	r2, r2, #8
 80025dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 fe84 	bl	80062f0 <USB_ReadInterrupts>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f2:	d10f      	bne.n	8002614 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	4619      	mov	r1, r3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f005 fdb8 	bl	8008174 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002612:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fe69 	bl	80062f0 <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002624:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002628:	d10f      	bne.n	800264a <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4619      	mov	r1, r3
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f005 fd8b 	bl	8008150 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002648:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f003 fe4e 	bl	80062f0 <USB_ReadInterrupts>
 8002654:	4603      	mov	r3, r0
 8002656:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800265a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265e:	d10a      	bne.n	8002676 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f005 fd99 	bl	8008198 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002674:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f003 fe38 	bl	80062f0 <USB_ReadInterrupts>
 8002680:	4603      	mov	r3, r0
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b04      	cmp	r3, #4
 8002688:	d115      	bne.n	80026b6 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f005 fd89 	bl	80081b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	e000      	b.n	80026b6 <HAL_PCD_IRQHandler+0x742>
      return;
 80026b4:	bf00      	nop
    }
  }
}
 80026b6:	3734      	adds	r7, #52	; 0x34
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd90      	pop	{r4, r7, pc}

080026bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_PCD_SetAddress+0x1a>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e013      	b.n	80026fe <HAL_PCD_SetAddress+0x42>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f003 fda8 	bl	8006244 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	4608      	mov	r0, r1
 8002710:	4611      	mov	r1, r2
 8002712:	461a      	mov	r2, r3
 8002714:	4603      	mov	r3, r0
 8002716:	70fb      	strb	r3, [r7, #3]
 8002718:	460b      	mov	r3, r1
 800271a:	803b      	strh	r3, [r7, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002724:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002728:	2b00      	cmp	r3, #0
 800272a:	da0f      	bge.n	800274c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	f003 020f 	and.w	r2, r3, #15
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	3338      	adds	r3, #56	; 0x38
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	4413      	add	r3, r2
 8002740:	3304      	adds	r3, #4
 8002742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	705a      	strb	r2, [r3, #1]
 800274a:	e00f      	b.n	800276c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	f003 020f 	and.w	r2, r3, #15
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	3304      	adds	r3, #4
 8002764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	b2da      	uxtb	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002778:	883a      	ldrh	r2, [r7, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	78ba      	ldrb	r2, [r7, #2]
 8002782:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	785b      	ldrb	r3, [r3, #1]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002796:	78bb      	ldrb	r3, [r7, #2]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d102      	bne.n	80027a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_PCD_EP_Open+0xaa>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e00e      	b.n	80027ce <HAL_PCD_EP_Open+0xc8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68f9      	ldr	r1, [r7, #12]
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 ffb4 	bl	800572c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80027cc:	7afb      	ldrb	r3, [r7, #11]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	da0f      	bge.n	800280a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	f003 020f 	and.w	r2, r3, #15
 80027f0:	4613      	mov	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	3338      	adds	r3, #56	; 0x38
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	3304      	adds	r3, #4
 8002800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	705a      	strb	r2, [r3, #1]
 8002808:	e00f      	b.n	800282a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	f003 020f 	and.w	r2, r3, #15
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4413      	add	r3, r2
 8002820:	3304      	adds	r3, #4
 8002822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_PCD_EP_Close+0x6e>
 8002840:	2302      	movs	r3, #2
 8002842:	e00e      	b.n	8002862 <HAL_PCD_EP_Close+0x8c>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68f9      	ldr	r1, [r7, #12]
 8002852:	4618      	mov	r0, r3
 8002854:	f002 fff2 	bl	800583c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	460b      	mov	r3, r1
 8002878:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800287a:	7afb      	ldrb	r3, [r7, #11]
 800287c:	f003 020f 	and.w	r2, r3, #15
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	3304      	adds	r3, #4
 8002892:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2200      	movs	r2, #0
 80028a4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2200      	movs	r2, #0
 80028aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6979      	ldr	r1, [r7, #20]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 fa6f 	bl	8005dac <USB_EP0StartXfer>
 80028ce:	e005      	b.n	80028dc <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6979      	ldr	r1, [r7, #20]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 f88c 	bl	80059f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b086      	sub	sp, #24
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	460b      	mov	r3, r1
 80028f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f6:	7afb      	ldrb	r3, [r7, #11]
 80028f8:	f003 020f 	and.w	r2, r3, #15
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	3338      	adds	r3, #56	; 0x38
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2201      	movs	r2, #1
 8002924:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	b2da      	uxtb	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002932:	7afb      	ldrb	r3, [r7, #11]
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	2b00      	cmp	r3, #0
 800293a:	d106      	bne.n	800294a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6979      	ldr	r1, [r7, #20]
 8002942:	4618      	mov	r0, r3
 8002944:	f003 fa32 	bl	8005dac <USB_EP0StartXfer>
 8002948:	e005      	b.n	8002956 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6979      	ldr	r1, [r7, #20]
 8002950:	4618      	mov	r0, r3
 8002952:	f003 f84f 	bl	80059f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	d901      	bls.n	800297e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e04e      	b.n	8002a1c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800297e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002982:	2b00      	cmp	r3, #0
 8002984:	da0f      	bge.n	80029a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 020f 	and.w	r2, r3, #15
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	3338      	adds	r3, #56	; 0x38
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	3304      	adds	r3, #4
 800299c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	705a      	strb	r2, [r3, #1]
 80029a4:	e00d      	b.n	80029c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	3304      	adds	r3, #4
 80029ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_PCD_EP_SetStall+0x82>
 80029de:	2302      	movs	r3, #2
 80029e0:	e01c      	b.n	8002a1c <HAL_PCD_EP_SetStall+0xbc>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68f9      	ldr	r1, [r7, #12]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 fb53 	bl	800609c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d108      	bne.n	8002a12 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	f003 fd33 	bl	8006478 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f003 020f 	and.w	r2, r3, #15
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d901      	bls.n	8002a42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e042      	b.n	8002ac8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	da0f      	bge.n	8002a6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 020f 	and.w	r2, r3, #15
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	3338      	adds	r3, #56	; 0x38
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3304      	adds	r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	705a      	strb	r2, [r3, #1]
 8002a68:	e00f      	b.n	8002a8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	f003 020f 	and.w	r2, r3, #15
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	3304      	adds	r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_PCD_EP_ClrStall+0x86>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e00e      	b.n	8002ac8 <HAL_PCD_EP_ClrStall+0xa4>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68f9      	ldr	r1, [r7, #12]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 fb5d 	bl	8006178 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	3338      	adds	r3, #56	; 0x38
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	3304      	adds	r3, #4
 8002af6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d901      	bls.n	8002b08 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e067      	b.n	8002bd8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d902      	bls.n	8002b24 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3303      	adds	r3, #3
 8002b28:	089b      	lsrs	r3, r3, #2
 8002b2a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b2c:	e026      	b.n	8002b7c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d902      	bls.n	8002b4a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3303      	adds	r3, #3
 8002b4e:	089b      	lsrs	r3, r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	68d9      	ldr	r1, [r3, #12]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	6978      	ldr	r0, [r7, #20]
 8002b60:	f003 fa42 	bl	8005fe8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	441a      	add	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	441a      	add	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d809      	bhi.n	8002ba6 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d203      	bcs.n	8002ba6 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1c3      	bne.n	8002b2e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d811      	bhi.n	8002bd6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	2201      	movs	r2, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	6939      	ldr	r1, [r7, #16]
 8002bce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	333c      	adds	r3, #60	; 0x3c
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a19      	ldr	r2, [pc, #100]	; (8002c78 <PCD_EP_OutXfrComplete_int+0x98>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d124      	bne.n	8002c60 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c32:	6093      	str	r3, [r2, #8]
 8002c34:	e01a      	b.n	8002c6c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2320      	movs	r3, #32
 8002c50:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	4619      	mov	r1, r3
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f005 f9c9 	bl	8007ff0 <HAL_PCD_DataOutStageCallback>
 8002c5e:	e005      	b.n	8002c6c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	4619      	mov	r1, r3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f005 f9c2 	bl	8007ff0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	4f54310a 	.word	0x4f54310a

08002c7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	333c      	adds	r3, #60	; 0x3c
 8002c94:	3304      	adds	r3, #4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a0c      	ldr	r2, [pc, #48]	; (8002ce0 <PCD_EP_OutSetupPacket_int+0x64>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d90e      	bls.n	8002cd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f005 f97b 	bl	8007fcc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	4f54300a 	.word	0x4f54300a

08002ce4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70fb      	strb	r3, [r7, #3]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d107      	bne.n	8002d12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d02:	883b      	ldrh	r3, [r7, #0]
 8002d04:	0419      	lsls	r1, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d10:	e028      	b.n	8002d64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	0c1b      	lsrs	r3, r3, #16
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]
 8002d24:	e00d      	b.n	8002d42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	3340      	adds	r3, #64	; 0x40
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	4413      	add	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
 8002d42:	7bfa      	ldrb	r2, [r7, #15]
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d3ec      	bcc.n	8002d26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d4c:	883b      	ldrh	r3, [r7, #0]
 8002d4e:	0418      	lsls	r0, r3, #16
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6819      	ldr	r1, [r3, #0]
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	4302      	orrs	r2, r0
 8002d5c:	3340      	adds	r3, #64	; 0x40
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	f043 0303 	orr.w	r3, r3, #3
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dea:	6013      	str	r3, [r2, #0]
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40007000 	.word	0x40007000

08002dfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40007000 	.word	0x40007000

08002e18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e26:	d130      	bne.n	8002e8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e28:	4b23      	ldr	r3, [pc, #140]	; (8002eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e34:	d038      	beq.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e46:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2232      	movs	r2, #50	; 0x32
 8002e4c:	fb02 f303 	mul.w	r3, r2, r3
 8002e50:	4a1b      	ldr	r2, [pc, #108]	; (8002ec0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9b      	lsrs	r3, r3, #18
 8002e58:	3301      	adds	r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e5c:	e002      	b.n	8002e64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e70:	d102      	bne.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f2      	bne.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e84:	d110      	bne.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e00f      	b.n	8002eaa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e96:	d007      	beq.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e98:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ea0:	4a05      	ldr	r2, [pc, #20]	; (8002eb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ea6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40007000 	.word	0x40007000
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	431bde83 	.word	0x431bde83

08002ec4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ed2:	6053      	str	r3, [r2, #4]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40007000 	.word	0x40007000

08002ee4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002eec:	f7fe f99a 	bl	8001224 <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e06f      	b.n	8002fdc <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_QSPI_Init+0x28>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e067      	b.n	8002fdc <HAL_QSPI_Init+0xf8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7fd ff57 	bl	8000ddc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002f2e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f858 	bl	8002fe8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	021a      	lsls	r2, r3, #8
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2120      	movs	r1, #32
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f850 	bl	8003004 <QSPI_WaitFlagStateUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002f68:	7afb      	ldrb	r3, [r7, #11]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d131      	bne.n	8002fd2 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f78:	f023 0310 	bic.w	r3, r3, #16
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6852      	ldr	r2, [r2, #4]
 8002f80:	0611      	lsls	r1, r2, #24
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68d2      	ldr	r2, [r2, #12]
 8002f86:	4311      	orrs	r1, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <HAL_QSPI_Init+0x100>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6912      	ldr	r2, [r2, #16]
 8002f9e:	0411      	lsls	r1, r2, #16
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6952      	ldr	r2, [r2, #20]
 8002fa4:	4311      	orrs	r1, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6992      	ldr	r2, [r2, #24]
 8002faa:	4311      	orrs	r1, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002fda:	7afb      	ldrb	r3, [r7, #11]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	ffe0f8fe 	.word	0xffe0f8fe

08002fe8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003014:	e01a      	b.n	800304c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d016      	beq.n	800304c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301e:	f7fe f901 	bl	8001224 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	429a      	cmp	r2, r3
 800302c:	d302      	bcc.n	8003034 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2204      	movs	r2, #4
 8003038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003040:	f043 0201 	orr.w	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e00e      	b.n	800306a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	bf14      	ite	ne
 800305a:	2301      	movne	r3, #1
 800305c:	2300      	moveq	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	429a      	cmp	r2, r3
 8003066:	d1d6      	bne.n	8003016 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e3d4      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003086:	4ba1      	ldr	r3, [pc, #644]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003090:	4b9e      	ldr	r3, [pc, #632]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80e4 	beq.w	8003270 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <HAL_RCC_OscConfig+0x4a>
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	f040 808b 	bne.w	80031cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	f040 8087 	bne.w	80031cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030be:	4b93      	ldr	r3, [pc, #588]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_RCC_OscConfig+0x62>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e3ac      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1a      	ldr	r2, [r3, #32]
 80030da:	4b8c      	ldr	r3, [pc, #560]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d004      	beq.n	80030f0 <HAL_RCC_OscConfig+0x7c>
 80030e6:	4b89      	ldr	r3, [pc, #548]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ee:	e005      	b.n	80030fc <HAL_RCC_OscConfig+0x88>
 80030f0:	4b86      	ldr	r3, [pc, #536]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80030f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d223      	bcs.n	8003148 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fd3f 	bl	8003b88 <RCC_SetFlashLatencyFromMSIRange>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e38d      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003114:	4b7d      	ldr	r3, [pc, #500]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a7c      	ldr	r2, [pc, #496]	; (800330c <HAL_RCC_OscConfig+0x298>)
 800311a:	f043 0308 	orr.w	r3, r3, #8
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4b7a      	ldr	r3, [pc, #488]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4977      	ldr	r1, [pc, #476]	; (800330c <HAL_RCC_OscConfig+0x298>)
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003132:	4b76      	ldr	r3, [pc, #472]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	4972      	ldr	r1, [pc, #456]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]
 8003146:	e025      	b.n	8003194 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003148:	4b70      	ldr	r3, [pc, #448]	; (800330c <HAL_RCC_OscConfig+0x298>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a6f      	ldr	r2, [pc, #444]	; (800330c <HAL_RCC_OscConfig+0x298>)
 800314e:	f043 0308 	orr.w	r3, r3, #8
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	496a      	ldr	r1, [pc, #424]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003166:	4b69      	ldr	r3, [pc, #420]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	021b      	lsls	r3, r3, #8
 8003174:	4965      	ldr	r1, [pc, #404]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d109      	bne.n	8003194 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fcff 	bl	8003b88 <RCC_SetFlashLatencyFromMSIRange>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e34d      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003194:	f000 fc36 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 8003198:	4601      	mov	r1, r0
 800319a:	4b5c      	ldr	r3, [pc, #368]	; (800330c <HAL_RCC_OscConfig+0x298>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	4a5a      	ldr	r2, [pc, #360]	; (8003310 <HAL_RCC_OscConfig+0x29c>)
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	fa21 f303 	lsr.w	r3, r1, r3
 80031b0:	4a58      	ldr	r2, [pc, #352]	; (8003314 <HAL_RCC_OscConfig+0x2a0>)
 80031b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031b4:	4b58      	ldr	r3, [pc, #352]	; (8003318 <HAL_RCC_OscConfig+0x2a4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd ffe7 	bl	800118c <HAL_InitTick>
 80031be:	4603      	mov	r3, r0
 80031c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d052      	beq.n	800326e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	e331      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d032      	beq.n	800323a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031d4:	4b4d      	ldr	r3, [pc, #308]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a4c      	ldr	r2, [pc, #304]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031e0:	f7fe f820 	bl	8001224 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031e8:	f7fe f81c 	bl	8001224 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e31a      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031fa:	4b44      	ldr	r3, [pc, #272]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003206:	4b41      	ldr	r3, [pc, #260]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a40      	ldr	r2, [pc, #256]	; (800330c <HAL_RCC_OscConfig+0x298>)
 800320c:	f043 0308 	orr.w	r3, r3, #8
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b3e      	ldr	r3, [pc, #248]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	493b      	ldr	r1, [pc, #236]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003220:	4313      	orrs	r3, r2
 8003222:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003224:	4b39      	ldr	r3, [pc, #228]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	4936      	ldr	r1, [pc, #216]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
 8003238:	e01a      	b.n	8003270 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800323a:	4b34      	ldr	r3, [pc, #208]	; (800330c <HAL_RCC_OscConfig+0x298>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a33      	ldr	r2, [pc, #204]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003246:	f7fd ffed 	bl	8001224 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800324e:	f7fd ffe9 	bl	8001224 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e2e7      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003260:	4b2a      	ldr	r3, [pc, #168]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f0      	bne.n	800324e <HAL_RCC_OscConfig+0x1da>
 800326c:	e000      	b.n	8003270 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800326e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d074      	beq.n	8003366 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b08      	cmp	r3, #8
 8003280:	d005      	beq.n	800328e <HAL_RCC_OscConfig+0x21a>
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d10e      	bne.n	80032a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b03      	cmp	r3, #3
 800328c:	d10b      	bne.n	80032a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328e:	4b1f      	ldr	r3, [pc, #124]	; (800330c <HAL_RCC_OscConfig+0x298>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d064      	beq.n	8003364 <HAL_RCC_OscConfig+0x2f0>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d160      	bne.n	8003364 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e2c4      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ae:	d106      	bne.n	80032be <HAL_RCC_OscConfig+0x24a>
 80032b0:	4b16      	ldr	r3, [pc, #88]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a15      	ldr	r2, [pc, #84]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80032b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	e01d      	b.n	80032fa <HAL_RCC_OscConfig+0x286>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c6:	d10c      	bne.n	80032e2 <HAL_RCC_OscConfig+0x26e>
 80032c8:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0f      	ldr	r2, [pc, #60]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80032ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b0d      	ldr	r3, [pc, #52]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0c      	ldr	r2, [pc, #48]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80032da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	e00b      	b.n	80032fa <HAL_RCC_OscConfig+0x286>
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a09      	ldr	r2, [pc, #36]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80032e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a06      	ldr	r2, [pc, #24]	; (800330c <HAL_RCC_OscConfig+0x298>)
 80032f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01c      	beq.n	800333c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7fd ff8f 	bl	8001224 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003308:	e011      	b.n	800332e <HAL_RCC_OscConfig+0x2ba>
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	080087e0 	.word	0x080087e0
 8003314:	20000000 	.word	0x20000000
 8003318:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7fd ff82 	bl	8001224 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e280      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800332e:	4baf      	ldr	r3, [pc, #700]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x2a8>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fd ff72 	bl	8001224 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7fd ff6e 	bl	8001224 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e26c      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003356:	4ba5      	ldr	r3, [pc, #660]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x2d0>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d060      	beq.n	8003434 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b04      	cmp	r3, #4
 8003376:	d005      	beq.n	8003384 <HAL_RCC_OscConfig+0x310>
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d119      	bne.n	80033b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d116      	bne.n	80033b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003384:	4b99      	ldr	r3, [pc, #612]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_OscConfig+0x328>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e249      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339c:	4b93      	ldr	r3, [pc, #588]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	061b      	lsls	r3, r3, #24
 80033aa:	4990      	ldr	r1, [pc, #576]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b0:	e040      	b.n	8003434 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d023      	beq.n	8003402 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033ba:	4b8c      	ldr	r3, [pc, #560]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a8b      	ldr	r2, [pc, #556]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 80033c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fd ff2d 	bl	8001224 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ce:	f7fd ff29 	bl	8001224 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e227      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e0:	4b82      	ldr	r3, [pc, #520]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ec:	4b7f      	ldr	r3, [pc, #508]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	497c      	ldr	r1, [pc, #496]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
 8003400:	e018      	b.n	8003434 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003402:	4b7a      	ldr	r3, [pc, #488]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a79      	ldr	r2, [pc, #484]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 8003408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800340c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fd ff09 	bl	8001224 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003416:	f7fd ff05 	bl	8001224 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e203      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003428:	4b70      	ldr	r3, [pc, #448]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f0      	bne.n	8003416 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d03c      	beq.n	80034ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01c      	beq.n	8003482 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003448:	4b68      	ldr	r3, [pc, #416]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 800344a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800344e:	4a67      	ldr	r2, [pc, #412]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003458:	f7fd fee4 	bl	8001224 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003460:	f7fd fee0 	bl	8001224 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1de      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003472:	4b5e      	ldr	r3, [pc, #376]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 8003474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ef      	beq.n	8003460 <HAL_RCC_OscConfig+0x3ec>
 8003480:	e01b      	b.n	80034ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003482:	4b5a      	ldr	r3, [pc, #360]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 8003484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003488:	4a58      	ldr	r2, [pc, #352]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003492:	f7fd fec7 	bl	8001224 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349a:	f7fd fec3 	bl	8001224 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e1c1      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ac:	4b4f      	ldr	r3, [pc, #316]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 80034ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1ef      	bne.n	800349a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 80a6 	beq.w	8003614 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c8:	2300      	movs	r3, #0
 80034ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034cc:	4b47      	ldr	r3, [pc, #284]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 80034ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10d      	bne.n	80034f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d8:	4b44      	ldr	r3, [pc, #272]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	4a43      	ldr	r2, [pc, #268]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 80034de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e2:	6593      	str	r3, [r2, #88]	; 0x58
 80034e4:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f0:	2301      	movs	r3, #1
 80034f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f4:	4b3e      	ldr	r3, [pc, #248]	; (80035f0 <HAL_RCC_OscConfig+0x57c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d118      	bne.n	8003532 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003500:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_RCC_OscConfig+0x57c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a3a      	ldr	r2, [pc, #232]	; (80035f0 <HAL_RCC_OscConfig+0x57c>)
 8003506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350c:	f7fd fe8a 	bl	8001224 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003514:	f7fd fe86 	bl	8001224 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e184      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003526:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <HAL_RCC_OscConfig+0x57c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d108      	bne.n	800354c <HAL_RCC_OscConfig+0x4d8>
 800353a:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003540:	4a2a      	ldr	r2, [pc, #168]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800354a:	e024      	b.n	8003596 <HAL_RCC_OscConfig+0x522>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b05      	cmp	r3, #5
 8003552:	d110      	bne.n	8003576 <HAL_RCC_OscConfig+0x502>
 8003554:	4b25      	ldr	r3, [pc, #148]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	4a24      	ldr	r2, [pc, #144]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003564:	4b21      	ldr	r3, [pc, #132]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	4a20      	ldr	r2, [pc, #128]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003574:	e00f      	b.n	8003596 <HAL_RCC_OscConfig+0x522>
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357c:	4a1b      	ldr	r2, [pc, #108]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003586:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	4a17      	ldr	r2, [pc, #92]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 800358e:	f023 0304 	bic.w	r3, r3, #4
 8003592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d016      	beq.n	80035cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359e:	f7fd fe41 	bl	8001224 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a4:	e00a      	b.n	80035bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a6:	f7fd fe3d 	bl	8001224 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e139      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_OscConfig+0x578>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0ed      	beq.n	80035a6 <HAL_RCC_OscConfig+0x532>
 80035ca:	e01a      	b.n	8003602 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fd fe2a 	bl	8001224 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d2:	e00f      	b.n	80035f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fd fe26 	bl	8001224 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d906      	bls.n	80035f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e122      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035f4:	4b90      	ldr	r3, [pc, #576]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e8      	bne.n	80035d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003602:	7ffb      	ldrb	r3, [r7, #31]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d105      	bne.n	8003614 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003608:	4b8b      	ldr	r3, [pc, #556]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	4a8a      	ldr	r2, [pc, #552]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 800360e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003612:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8108 	beq.w	800382e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	2b02      	cmp	r3, #2
 8003624:	f040 80d0 	bne.w	80037c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003628:	4b83      	ldr	r3, [pc, #524]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f003 0203 	and.w	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	429a      	cmp	r2, r3
 800363a:	d130      	bne.n	800369e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	3b01      	subs	r3, #1
 8003648:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d127      	bne.n	800369e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003658:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d11f      	bne.n	800369e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003668:	2a07      	cmp	r2, #7
 800366a:	bf14      	ite	ne
 800366c:	2201      	movne	r2, #1
 800366e:	2200      	moveq	r2, #0
 8003670:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003672:	4293      	cmp	r3, r2
 8003674:	d113      	bne.n	800369e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	3b01      	subs	r3, #1
 8003684:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d109      	bne.n	800369e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	3b01      	subs	r3, #1
 8003698:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d06e      	beq.n	800377c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	2b0c      	cmp	r3, #12
 80036a2:	d069      	beq.n	8003778 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036a4:	4b64      	ldr	r3, [pc, #400]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036b0:	4b61      	ldr	r3, [pc, #388]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b7      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036c0:	4b5d      	ldr	r3, [pc, #372]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5c      	ldr	r2, [pc, #368]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80036c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036cc:	f7fd fdaa 	bl	8001224 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fd fda6 	bl	8001224 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e0a4      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e6:	4b54      	ldr	r3, [pc, #336]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f2:	4b51      	ldr	r3, [pc, #324]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	4b51      	ldr	r3, [pc, #324]	; (800383c <HAL_RCC_OscConfig+0x7c8>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003702:	3a01      	subs	r2, #1
 8003704:	0112      	lsls	r2, r2, #4
 8003706:	4311      	orrs	r1, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800370c:	0212      	lsls	r2, r2, #8
 800370e:	4311      	orrs	r1, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003714:	0852      	lsrs	r2, r2, #1
 8003716:	3a01      	subs	r2, #1
 8003718:	0552      	lsls	r2, r2, #21
 800371a:	4311      	orrs	r1, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003720:	0852      	lsrs	r2, r2, #1
 8003722:	3a01      	subs	r2, #1
 8003724:	0652      	lsls	r2, r2, #25
 8003726:	4311      	orrs	r1, r2
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800372c:	0912      	lsrs	r2, r2, #4
 800372e:	0452      	lsls	r2, r2, #17
 8003730:	430a      	orrs	r2, r1
 8003732:	4941      	ldr	r1, [pc, #260]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003738:	4b3f      	ldr	r3, [pc, #252]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a3e      	ldr	r2, [pc, #248]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 800373e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003742:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003744:	4b3c      	ldr	r3, [pc, #240]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a3b      	ldr	r2, [pc, #236]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 800374a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800374e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003750:	f7fd fd68 	bl	8001224 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003758:	f7fd fd64 	bl	8001224 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e062      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376a:	4b33      	ldr	r3, [pc, #204]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003776:	e05a      	b.n	800382e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e059      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377c:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d152      	bne.n	800382e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003788:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2a      	ldr	r2, [pc, #168]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 800378e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003792:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003794:	4b28      	ldr	r3, [pc, #160]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4a27      	ldr	r2, [pc, #156]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 800379a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037a0:	f7fd fd40 	bl	8001224 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fd fd3c 	bl	8001224 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e03a      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ba:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0x734>
 80037c6:	e032      	b.n	800382e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b0c      	cmp	r3, #12
 80037cc:	d02d      	beq.n	800382a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a19      	ldr	r2, [pc, #100]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80037d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d105      	bne.n	80037f2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	4a13      	ldr	r2, [pc, #76]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80037ec:	f023 0303 	bic.w	r3, r3, #3
 80037f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	4a10      	ldr	r2, [pc, #64]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 80037f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003800:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003802:	f7fd fd0f 	bl	8001224 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380a:	f7fd fd0b 	bl	8001224 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e009      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_RCC_OscConfig+0x7c4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1f0      	bne.n	800380a <HAL_RCC_OscConfig+0x796>
 8003828:	e001      	b.n	800382e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	f99d808c 	.word	0xf99d808c

08003840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0c8      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003854:	4b66      	ldr	r3, [pc, #408]	; (80039f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d910      	bls.n	8003884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b63      	ldr	r3, [pc, #396]	; (80039f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 0207 	bic.w	r2, r3, #7
 800386a:	4961      	ldr	r1, [pc, #388]	; (80039f0 <HAL_RCC_ClockConfig+0x1b0>)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003872:	4b5f      	ldr	r3, [pc, #380]	; (80039f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d001      	beq.n	8003884 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0b0      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d04c      	beq.n	800392a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003898:	4b56      	ldr	r3, [pc, #344]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d121      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e09e      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038b0:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d115      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e092      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d107      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038c8:	4b4a      	ldr	r3, [pc, #296]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e086      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d8:	4b46      	ldr	r3, [pc, #280]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e07e      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038e8:	4b42      	ldr	r3, [pc, #264]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f023 0203 	bic.w	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	493f      	ldr	r1, [pc, #252]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fa:	f7fd fc93 	bl	8001224 <HAL_GetTick>
 80038fe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003900:	e00a      	b.n	8003918 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003902:	f7fd fc8f 	bl	8001224 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003910:	4293      	cmp	r3, r2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e066      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003918:	4b36      	ldr	r3, [pc, #216]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 020c 	and.w	r2, r3, #12
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	429a      	cmp	r2, r3
 8003928:	d1eb      	bne.n	8003902 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003936:	4b2f      	ldr	r3, [pc, #188]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	492c      	ldr	r1, [pc, #176]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003944:	4313      	orrs	r3, r2
 8003946:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003948:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <HAL_RCC_ClockConfig+0x1b0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d210      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b26      	ldr	r3, [pc, #152]	; (80039f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 0207 	bic.w	r2, r3, #7
 800395e:	4924      	ldr	r1, [pc, #144]	; (80039f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <HAL_RCC_ClockConfig+0x1b0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e036      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4918      	ldr	r1, [pc, #96]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4910      	ldr	r1, [pc, #64]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039b6:	f000 f825 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 80039ba:	4601      	mov	r1, r0
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <HAL_RCC_ClockConfig+0x1b4>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	fa21 f303 	lsr.w	r3, r1, r3
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fd fbd6 	bl	800118c <HAL_InitTick>
 80039e0:	4603      	mov	r3, r0
 80039e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80039e4:	7afb      	ldrb	r3, [r7, #11]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40022000 	.word	0x40022000
 80039f4:	40021000 	.word	0x40021000
 80039f8:	080087e0 	.word	0x080087e0
 80039fc:	20000000 	.word	0x20000000
 8003a00:	20000004 	.word	0x20000004

08003a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	; 0x24
 8003a08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a12:	4b3d      	ldr	r3, [pc, #244]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a1c:	4b3a      	ldr	r3, [pc, #232]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x34>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	d121      	bne.n	8003a76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d11e      	bne.n	8003a76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a38:	4b33      	ldr	r3, [pc, #204]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d107      	bne.n	8003a54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a44:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a4a:	0a1b      	lsrs	r3, r3, #8
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	e005      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a54:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a60:	4a2a      	ldr	r2, [pc, #168]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10d      	bne.n	8003a8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a74:	e00a      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d102      	bne.n	8003a82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a7c:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	e004      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a88:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d133      	bne.n	8003afa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a92:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d002      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0xa4>
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d003      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0xaa>
 8003aa6:	e005      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003aa8:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003aaa:	617b      	str	r3, [r7, #20]
      break;
 8003aac:	e005      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003aae:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ab0:	617b      	str	r3, [r7, #20]
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	617b      	str	r3, [r7, #20]
      break;
 8003ab8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x104>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x104>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	fb02 f203 	mul.w	r2, r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ae0:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	0e5b      	lsrs	r3, r3, #25
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	3301      	adds	r3, #1
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003afa:	69bb      	ldr	r3, [r7, #24]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3724      	adds	r7, #36	; 0x24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	080087f8 	.word	0x080087f8
 8003b10:	00f42400 	.word	0x00f42400
 8003b14:	007a1200 	.word	0x007a1200

08003b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000000 	.word	0x20000000

08003b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b34:	f7ff fff0 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b38:	4601      	mov	r1, r0
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	0a1b      	lsrs	r3, r3, #8
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b46:	5cd3      	ldrb	r3, [r2, r3]
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40021000 	.word	0x40021000
 8003b58:	080087f0 	.word	0x080087f0

08003b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b60:	f7ff ffda 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b64:	4601      	mov	r1, r0
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	0adb      	lsrs	r3, r3, #11
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b72:	5cd3      	ldrb	r3, [r2, r3]
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	080087f0 	.word	0x080087f0

08003b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b94:	4b2a      	ldr	r3, [pc, #168]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ba0:	f7ff f92c 	bl	8002dfc <HAL_PWREx_GetVoltageRange>
 8003ba4:	6178      	str	r0, [r7, #20]
 8003ba6:	e014      	b.n	8003bd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ba8:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	4a24      	ldr	r2, [pc, #144]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bb4:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bc0:	f7ff f91c 	bl	8002dfc <HAL_PWREx_GetVoltageRange>
 8003bc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd8:	d10b      	bne.n	8003bf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b80      	cmp	r3, #128	; 0x80
 8003bde:	d919      	bls.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2ba0      	cmp	r3, #160	; 0xa0
 8003be4:	d902      	bls.n	8003bec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003be6:	2302      	movs	r3, #2
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	e013      	b.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bec:	2301      	movs	r3, #1
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	e010      	b.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b80      	cmp	r3, #128	; 0x80
 8003bf6:	d902      	bls.n	8003bfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	e00a      	b.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d102      	bne.n	8003c0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c04:	2302      	movs	r3, #2
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	e004      	b.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b70      	cmp	r3, #112	; 0x70
 8003c0e:	d101      	bne.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c10:	2301      	movs	r3, #1
 8003c12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 0207 	bic.w	r2, r3, #7
 8003c1c:	4909      	ldr	r1, [pc, #36]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c24:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d001      	beq.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40022000 	.word	0x40022000

08003c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c50:	2300      	movs	r3, #0
 8003c52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c54:	2300      	movs	r3, #0
 8003c56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d03f      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c6c:	d01c      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c72:	d802      	bhi.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00e      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003c78:	e01f      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003c7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c7e:	d003      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c84:	d01c      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003c86:	e018      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c88:	4b85      	ldr	r3, [pc, #532]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4a84      	ldr	r2, [pc, #528]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c92:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c94:	e015      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fac9 	bl	8004234 <RCCEx_PLLSAI1_Config>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca6:	e00c      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3320      	adds	r3, #32
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fbb0 	bl	8004414 <RCCEx_PLLSAI2_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cb8:	e003      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	74fb      	strb	r3, [r7, #19]
      break;
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc2:	7cfb      	ldrb	r3, [r7, #19]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10b      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cc8:	4b75      	ldr	r3, [pc, #468]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd6:	4972      	ldr	r1, [pc, #456]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cde:	e001      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	7cfb      	ldrb	r3, [r7, #19]
 8003ce2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d03f      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cf8:	d01c      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003cfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cfe:	d802      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00e      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003d04:	e01f      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d0a:	d003      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003d0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d10:	d01c      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003d12:	e018      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d14:	4b62      	ldr	r3, [pc, #392]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a61      	ldr	r2, [pc, #388]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d20:	e015      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3304      	adds	r3, #4
 8003d26:	2100      	movs	r1, #0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fa83 	bl	8004234 <RCCEx_PLLSAI1_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d32:	e00c      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3320      	adds	r3, #32
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fb6a 	bl	8004414 <RCCEx_PLLSAI2_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d44:	e003      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	74fb      	strb	r3, [r7, #19]
      break;
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d4e:	7cfb      	ldrb	r3, [r7, #19]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10b      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d54:	4b52      	ldr	r3, [pc, #328]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d62:	494f      	ldr	r1, [pc, #316]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d6a:	e001      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	7cfb      	ldrb	r3, [r7, #19]
 8003d6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80a0 	beq.w	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d82:	4b47      	ldr	r3, [pc, #284]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003d92:	2300      	movs	r3, #0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00d      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d98:	4b41      	ldr	r3, [pc, #260]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	4a40      	ldr	r2, [pc, #256]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da2:	6593      	str	r3, [r2, #88]	; 0x58
 8003da4:	4b3e      	ldr	r3, [pc, #248]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db0:	2301      	movs	r3, #1
 8003db2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db4:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a3a      	ldr	r2, [pc, #232]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc0:	f7fd fa30 	bl	8001224 <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dc6:	e009      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc8:	f7fd fa2c 	bl	8001224 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d902      	bls.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	74fb      	strb	r3, [r7, #19]
        break;
 8003dda:	e005      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ddc:	4b31      	ldr	r3, [pc, #196]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ef      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d15c      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dee:	4b2c      	ldr	r3, [pc, #176]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01f      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d019      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e0c:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e18:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	4a20      	ldr	r2, [pc, #128]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e28:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e38:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d016      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fd f9eb 	bl	8001224 <HAL_GetTick>
 8003e4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e50:	e00b      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fd f9e7 	bl	8001224 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d902      	bls.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	74fb      	strb	r3, [r7, #19]
            break;
 8003e68:	e006      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ec      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e7e:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8e:	4904      	ldr	r1, [pc, #16]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e96:	e009      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	74bb      	strb	r3, [r7, #18]
 8003e9c:	e006      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eac:	7c7b      	ldrb	r3, [r7, #17]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d105      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb2:	4b9e      	ldr	r3, [pc, #632]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	4a9d      	ldr	r2, [pc, #628]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eca:	4b98      	ldr	r3, [pc, #608]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f023 0203 	bic.w	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	4994      	ldr	r1, [pc, #592]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eec:	4b8f      	ldr	r3, [pc, #572]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f023 020c 	bic.w	r2, r3, #12
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	498c      	ldr	r1, [pc, #560]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f0e:	4b87      	ldr	r3, [pc, #540]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	4983      	ldr	r1, [pc, #524]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f30:	4b7e      	ldr	r3, [pc, #504]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	497b      	ldr	r1, [pc, #492]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f52:	4b76      	ldr	r3, [pc, #472]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f60:	4972      	ldr	r1, [pc, #456]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f74:	4b6d      	ldr	r3, [pc, #436]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f82:	496a      	ldr	r1, [pc, #424]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f96:	4b65      	ldr	r3, [pc, #404]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa4:	4961      	ldr	r1, [pc, #388]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fb8:	4b5c      	ldr	r3, [pc, #368]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc6:	4959      	ldr	r1, [pc, #356]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fda:	4b54      	ldr	r3, [pc, #336]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe8:	4950      	ldr	r1, [pc, #320]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ffc:	4b4b      	ldr	r3, [pc, #300]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400a:	4948      	ldr	r1, [pc, #288]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800401e:	4b43      	ldr	r3, [pc, #268]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	493f      	ldr	r1, [pc, #252]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d028      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004040:	4b3a      	ldr	r3, [pc, #232]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800404e:	4937      	ldr	r1, [pc, #220]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800405a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800405e:	d106      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004060:	4b32      	ldr	r3, [pc, #200]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a31      	ldr	r2, [pc, #196]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800406a:	60d3      	str	r3, [r2, #12]
 800406c:	e011      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004072:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004076:	d10c      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f000 f8d8 	bl	8004234 <RCCEx_PLLSAI1_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004088:	7cfb      	ldrb	r3, [r7, #19]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d028      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800409e:	4b23      	ldr	r3, [pc, #140]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	491f      	ldr	r1, [pc, #124]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040bc:	d106      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040be:	4b1b      	ldr	r3, [pc, #108]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	4a1a      	ldr	r2, [pc, #104]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040c8:	60d3      	str	r3, [r2, #12]
 80040ca:	e011      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3304      	adds	r3, #4
 80040da:	2101      	movs	r1, #1
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f8a9 	bl	8004234 <RCCEx_PLLSAI1_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d02b      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410a:	4908      	ldr	r1, [pc, #32]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800411a:	d109      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4a02      	ldr	r2, [pc, #8]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004126:	60d3      	str	r3, [r2, #12]
 8004128:	e014      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004138:	d10c      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3304      	adds	r3, #4
 800413e:	2101      	movs	r1, #1
 8004140:	4618      	mov	r0, r3
 8004142:	f000 f877 	bl	8004234 <RCCEx_PLLSAI1_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800414a:	7cfb      	ldrb	r3, [r7, #19]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004150:	7cfb      	ldrb	r3, [r7, #19]
 8004152:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d02f      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004160:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004166:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800416e:	4928      	ldr	r1, [pc, #160]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800417a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800417e:	d10d      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	2102      	movs	r1, #2
 8004186:	4618      	mov	r0, r3
 8004188:	f000 f854 	bl	8004234 <RCCEx_PLLSAI1_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004190:	7cfb      	ldrb	r3, [r7, #19]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d014      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004196:	7cfb      	ldrb	r3, [r7, #19]
 8004198:	74bb      	strb	r3, [r7, #18]
 800419a:	e011      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3320      	adds	r3, #32
 80041aa:	2102      	movs	r1, #2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 f931 	bl	8004414 <RCCEx_PLLSAI2_Config>
 80041b2:	4603      	mov	r3, r0
 80041b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041b6:	7cfb      	ldrb	r3, [r7, #19]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041cc:	4b10      	ldr	r3, [pc, #64]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041da:	490d      	ldr	r1, [pc, #52]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041ee:	4b08      	ldr	r3, [pc, #32]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041fe:	4904      	ldr	r1, [pc, #16]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004206:	7cbb      	ldrb	r3, [r7, #18]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021000 	.word	0x40021000

08004214 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800421e:	f043 0304 	orr.w	r3, r3, #4
 8004222:	6013      	str	r3, [r2, #0]
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000

08004234 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004242:	4b73      	ldr	r3, [pc, #460]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d018      	beq.n	8004280 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800424e:	4b70      	ldr	r3, [pc, #448]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0203 	and.w	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d10d      	bne.n	800427a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
       ||
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004266:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
       ||
 8004276:	429a      	cmp	r2, r3
 8004278:	d044      	beq.n	8004304 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
 800427e:	e041      	b.n	8004304 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d00c      	beq.n	80042a2 <RCCEx_PLLSAI1_Config+0x6e>
 8004288:	2b03      	cmp	r3, #3
 800428a:	d013      	beq.n	80042b4 <RCCEx_PLLSAI1_Config+0x80>
 800428c:	2b01      	cmp	r3, #1
 800428e:	d120      	bne.n	80042d2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004290:	4b5f      	ldr	r3, [pc, #380]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11d      	bne.n	80042d8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a0:	e01a      	b.n	80042d8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042a2:	4b5b      	ldr	r3, [pc, #364]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d116      	bne.n	80042dc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b2:	e013      	b.n	80042dc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042b4:	4b56      	ldr	r3, [pc, #344]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10f      	bne.n	80042e0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042c0:	4b53      	ldr	r3, [pc, #332]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042d0:	e006      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
      break;
 80042d6:	e004      	b.n	80042e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80042d8:	bf00      	nop
 80042da:	e002      	b.n	80042e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80042dc:	bf00      	nop
 80042de:	e000      	b.n	80042e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80042e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10d      	bne.n	8004304 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042e8:	4b49      	ldr	r3, [pc, #292]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6819      	ldr	r1, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	430b      	orrs	r3, r1
 80042fe:	4944      	ldr	r1, [pc, #272]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004300:	4313      	orrs	r3, r2
 8004302:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d17d      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800430a:	4b41      	ldr	r3, [pc, #260]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a40      	ldr	r2, [pc, #256]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004310:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004316:	f7fc ff85 	bl	8001224 <HAL_GetTick>
 800431a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800431c:	e009      	b.n	8004332 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800431e:	f7fc ff81 	bl	8001224 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d902      	bls.n	8004332 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	73fb      	strb	r3, [r7, #15]
        break;
 8004330:	e005      	b.n	800433e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004332:	4b37      	ldr	r3, [pc, #220]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ef      	bne.n	800431e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d160      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d111      	bne.n	800436e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800434a:	4b31      	ldr	r3, [pc, #196]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6892      	ldr	r2, [r2, #8]
 800435a:	0211      	lsls	r1, r2, #8
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	68d2      	ldr	r2, [r2, #12]
 8004360:	0912      	lsrs	r2, r2, #4
 8004362:	0452      	lsls	r2, r2, #17
 8004364:	430a      	orrs	r2, r1
 8004366:	492a      	ldr	r1, [pc, #168]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004368:	4313      	orrs	r3, r2
 800436a:	610b      	str	r3, [r1, #16]
 800436c:	e027      	b.n	80043be <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d112      	bne.n	800439a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004374:	4b26      	ldr	r3, [pc, #152]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800437c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6892      	ldr	r2, [r2, #8]
 8004384:	0211      	lsls	r1, r2, #8
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6912      	ldr	r2, [r2, #16]
 800438a:	0852      	lsrs	r2, r2, #1
 800438c:	3a01      	subs	r2, #1
 800438e:	0552      	lsls	r2, r2, #21
 8004390:	430a      	orrs	r2, r1
 8004392:	491f      	ldr	r1, [pc, #124]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004394:	4313      	orrs	r3, r2
 8004396:	610b      	str	r3, [r1, #16]
 8004398:	e011      	b.n	80043be <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800439a:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6892      	ldr	r2, [r2, #8]
 80043aa:	0211      	lsls	r1, r2, #8
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6952      	ldr	r2, [r2, #20]
 80043b0:	0852      	lsrs	r2, r2, #1
 80043b2:	3a01      	subs	r2, #1
 80043b4:	0652      	lsls	r2, r2, #25
 80043b6:	430a      	orrs	r2, r1
 80043b8:	4915      	ldr	r1, [pc, #84]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a13      	ldr	r2, [pc, #76]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ca:	f7fc ff2b 	bl	8001224 <HAL_GetTick>
 80043ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043d0:	e009      	b.n	80043e6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043d2:	f7fc ff27 	bl	8001224 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d902      	bls.n	80043e6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	73fb      	strb	r3, [r7, #15]
          break;
 80043e4:	e005      	b.n	80043f2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0ef      	beq.n	80043d2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	4903      	ldr	r1, [pc, #12]	; (8004410 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004406:	7bfb      	ldrb	r3, [r7, #15]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021000 	.word	0x40021000

08004414 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004422:	4b68      	ldr	r3, [pc, #416]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d018      	beq.n	8004460 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800442e:	4b65      	ldr	r3, [pc, #404]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0203 	and.w	r2, r3, #3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d10d      	bne.n	800445a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
       ||
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004446:	4b5f      	ldr	r3, [pc, #380]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	091b      	lsrs	r3, r3, #4
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
       ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d044      	beq.n	80044e4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
 800445e:	e041      	b.n	80044e4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d00c      	beq.n	8004482 <RCCEx_PLLSAI2_Config+0x6e>
 8004468:	2b03      	cmp	r3, #3
 800446a:	d013      	beq.n	8004494 <RCCEx_PLLSAI2_Config+0x80>
 800446c:	2b01      	cmp	r3, #1
 800446e:	d120      	bne.n	80044b2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004470:	4b54      	ldr	r3, [pc, #336]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d11d      	bne.n	80044b8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004480:	e01a      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004482:	4b50      	ldr	r3, [pc, #320]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448a:	2b00      	cmp	r3, #0
 800448c:	d116      	bne.n	80044bc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004492:	e013      	b.n	80044bc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004494:	4b4b      	ldr	r3, [pc, #300]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10f      	bne.n	80044c0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044a0:	4b48      	ldr	r3, [pc, #288]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d109      	bne.n	80044c0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044b0:	e006      	b.n	80044c0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
      break;
 80044b6:	e004      	b.n	80044c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80044b8:	bf00      	nop
 80044ba:	e002      	b.n	80044c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80044bc:	bf00      	nop
 80044be:	e000      	b.n	80044c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80044c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10d      	bne.n	80044e4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044c8:	4b3e      	ldr	r3, [pc, #248]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	3b01      	subs	r3, #1
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	430b      	orrs	r3, r1
 80044de:	4939      	ldr	r1, [pc, #228]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d167      	bne.n	80045ba <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044ea:	4b36      	ldr	r3, [pc, #216]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a35      	ldr	r2, [pc, #212]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f6:	f7fc fe95 	bl	8001224 <HAL_GetTick>
 80044fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044fc:	e009      	b.n	8004512 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044fe:	f7fc fe91 	bl	8001224 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d902      	bls.n	8004512 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	73fb      	strb	r3, [r7, #15]
        break;
 8004510:	e005      	b.n	800451e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004512:	4b2c      	ldr	r3, [pc, #176]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1ef      	bne.n	80044fe <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d14a      	bne.n	80045ba <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d111      	bne.n	800454e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800452a:	4b26      	ldr	r3, [pc, #152]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6892      	ldr	r2, [r2, #8]
 800453a:	0211      	lsls	r1, r2, #8
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68d2      	ldr	r2, [r2, #12]
 8004540:	0912      	lsrs	r2, r2, #4
 8004542:	0452      	lsls	r2, r2, #17
 8004544:	430a      	orrs	r2, r1
 8004546:	491f      	ldr	r1, [pc, #124]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004548:	4313      	orrs	r3, r2
 800454a:	614b      	str	r3, [r1, #20]
 800454c:	e011      	b.n	8004572 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004556:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6892      	ldr	r2, [r2, #8]
 800455e:	0211      	lsls	r1, r2, #8
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6912      	ldr	r2, [r2, #16]
 8004564:	0852      	lsrs	r2, r2, #1
 8004566:	3a01      	subs	r2, #1
 8004568:	0652      	lsls	r2, r2, #25
 800456a:	430a      	orrs	r2, r1
 800456c:	4915      	ldr	r1, [pc, #84]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800456e:	4313      	orrs	r3, r2
 8004570:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004572:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457e:	f7fc fe51 	bl	8001224 <HAL_GetTick>
 8004582:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004584:	e009      	b.n	800459a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004586:	f7fc fe4d 	bl	8001224 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d902      	bls.n	800459a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	73fb      	strb	r3, [r7, #15]
          break;
 8004598:	e005      	b.n	80045a6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800459a:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0ef      	beq.n	8004586 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	4903      	ldr	r1, [pc, #12]	; (80045c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000

080045c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07c      	b.n	80046d4 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7fc fc35 	bl	8000e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004610:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800461a:	d902      	bls.n	8004622 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e002      	b.n	8004628 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004626:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004630:	d007      	beq.n	8004642 <HAL_SPI_Init+0x7a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800463a:	d002      	beq.n	8004642 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004652:	d903      	bls.n	800465c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	631a      	str	r2, [r3, #48]	; 0x30
 800465a:	e002      	b.n	8004662 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	ea42 0103 	orr.w	r1, r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	0c1b      	lsrs	r3, r3, #16
 80046a2:	f003 0204 	and.w	r2, r3, #4
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	ea42 0103 	orr.w	r1, r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e040      	b.n	8004770 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fc fbf4 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2224      	movs	r2, #36	; 0x24
 8004708:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0201 	bic.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f82c 	bl	8004778 <UART_SetConfig>
 8004720:	4603      	mov	r3, r0
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e022      	b.n	8004770 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fb92 	bl	8004e5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004746:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004756:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fc19 	bl	8004fa0 <UART_CheckIdleState>
 800476e:	4603      	mov	r3, r0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004778:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800477c:	b08a      	sub	sp, #40	; 0x28
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4bb8      	ldr	r3, [pc, #736]	; (8004a90 <UART_SetConfig+0x318>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047b6:	430b      	orrs	r3, r1
 80047b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4aae      	ldr	r2, [pc, #696]	; (8004a94 <UART_SetConfig+0x31c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d004      	beq.n	80047ea <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e6:	4313      	orrs	r3, r2
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fa:	430a      	orrs	r2, r1
 80047fc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4aa5      	ldr	r2, [pc, #660]	; (8004a98 <UART_SetConfig+0x320>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d126      	bne.n	8004856 <UART_SetConfig+0xde>
 8004808:	4ba4      	ldr	r3, [pc, #656]	; (8004a9c <UART_SetConfig+0x324>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b03      	cmp	r3, #3
 8004814:	d81a      	bhi.n	800484c <UART_SetConfig+0xd4>
 8004816:	a201      	add	r2, pc, #4	; (adr r2, 800481c <UART_SetConfig+0xa4>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	0800482d 	.word	0x0800482d
 8004820:	0800483d 	.word	0x0800483d
 8004824:	08004835 	.word	0x08004835
 8004828:	08004845 	.word	0x08004845
 800482c:	2301      	movs	r3, #1
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004832:	e105      	b.n	8004a40 <UART_SetConfig+0x2c8>
 8004834:	2302      	movs	r3, #2
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e101      	b.n	8004a40 <UART_SetConfig+0x2c8>
 800483c:	2304      	movs	r3, #4
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e0fd      	b.n	8004a40 <UART_SetConfig+0x2c8>
 8004844:	2308      	movs	r3, #8
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e0f9      	b.n	8004a40 <UART_SetConfig+0x2c8>
 800484c:	2310      	movs	r3, #16
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	bf00      	nop
 8004854:	e0f4      	b.n	8004a40 <UART_SetConfig+0x2c8>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a91      	ldr	r2, [pc, #580]	; (8004aa0 <UART_SetConfig+0x328>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d138      	bne.n	80048d2 <UART_SetConfig+0x15a>
 8004860:	4b8e      	ldr	r3, [pc, #568]	; (8004a9c <UART_SetConfig+0x324>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b0c      	cmp	r3, #12
 800486c:	d82c      	bhi.n	80048c8 <UART_SetConfig+0x150>
 800486e:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <UART_SetConfig+0xfc>)
 8004870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004874:	080048a9 	.word	0x080048a9
 8004878:	080048c9 	.word	0x080048c9
 800487c:	080048c9 	.word	0x080048c9
 8004880:	080048c9 	.word	0x080048c9
 8004884:	080048b9 	.word	0x080048b9
 8004888:	080048c9 	.word	0x080048c9
 800488c:	080048c9 	.word	0x080048c9
 8004890:	080048c9 	.word	0x080048c9
 8004894:	080048b1 	.word	0x080048b1
 8004898:	080048c9 	.word	0x080048c9
 800489c:	080048c9 	.word	0x080048c9
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048c1 	.word	0x080048c1
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ae:	e0c7      	b.n	8004a40 <UART_SetConfig+0x2c8>
 80048b0:	2302      	movs	r3, #2
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b6:	e0c3      	b.n	8004a40 <UART_SetConfig+0x2c8>
 80048b8:	2304      	movs	r3, #4
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048be:	e0bf      	b.n	8004a40 <UART_SetConfig+0x2c8>
 80048c0:	2308      	movs	r3, #8
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c6:	e0bb      	b.n	8004a40 <UART_SetConfig+0x2c8>
 80048c8:	2310      	movs	r3, #16
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ce:	bf00      	nop
 80048d0:	e0b6      	b.n	8004a40 <UART_SetConfig+0x2c8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a73      	ldr	r2, [pc, #460]	; (8004aa4 <UART_SetConfig+0x32c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d125      	bne.n	8004928 <UART_SetConfig+0x1b0>
 80048dc:	4b6f      	ldr	r3, [pc, #444]	; (8004a9c <UART_SetConfig+0x324>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d011      	beq.n	800490e <UART_SetConfig+0x196>
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d802      	bhi.n	80048f4 <UART_SetConfig+0x17c>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <UART_SetConfig+0x186>
 80048f2:	e014      	b.n	800491e <UART_SetConfig+0x1a6>
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d006      	beq.n	8004906 <UART_SetConfig+0x18e>
 80048f8:	2b30      	cmp	r3, #48	; 0x30
 80048fa:	d00c      	beq.n	8004916 <UART_SetConfig+0x19e>
 80048fc:	e00f      	b.n	800491e <UART_SetConfig+0x1a6>
 80048fe:	2300      	movs	r3, #0
 8004900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004904:	e09c      	b.n	8004a40 <UART_SetConfig+0x2c8>
 8004906:	2302      	movs	r3, #2
 8004908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490c:	e098      	b.n	8004a40 <UART_SetConfig+0x2c8>
 800490e:	2304      	movs	r3, #4
 8004910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004914:	e094      	b.n	8004a40 <UART_SetConfig+0x2c8>
 8004916:	2308      	movs	r3, #8
 8004918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491c:	e090      	b.n	8004a40 <UART_SetConfig+0x2c8>
 800491e:	2310      	movs	r3, #16
 8004920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004924:	bf00      	nop
 8004926:	e08b      	b.n	8004a40 <UART_SetConfig+0x2c8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a5e      	ldr	r2, [pc, #376]	; (8004aa8 <UART_SetConfig+0x330>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d125      	bne.n	800497e <UART_SetConfig+0x206>
 8004932:	4b5a      	ldr	r3, [pc, #360]	; (8004a9c <UART_SetConfig+0x324>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d011      	beq.n	8004964 <UART_SetConfig+0x1ec>
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d802      	bhi.n	800494a <UART_SetConfig+0x1d2>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <UART_SetConfig+0x1dc>
 8004948:	e014      	b.n	8004974 <UART_SetConfig+0x1fc>
 800494a:	2b80      	cmp	r3, #128	; 0x80
 800494c:	d006      	beq.n	800495c <UART_SetConfig+0x1e4>
 800494e:	2bc0      	cmp	r3, #192	; 0xc0
 8004950:	d00c      	beq.n	800496c <UART_SetConfig+0x1f4>
 8004952:	e00f      	b.n	8004974 <UART_SetConfig+0x1fc>
 8004954:	2300      	movs	r3, #0
 8004956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495a:	e071      	b.n	8004a40 <UART_SetConfig+0x2c8>
 800495c:	2302      	movs	r3, #2
 800495e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004962:	e06d      	b.n	8004a40 <UART_SetConfig+0x2c8>
 8004964:	2304      	movs	r3, #4
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496a:	e069      	b.n	8004a40 <UART_SetConfig+0x2c8>
 800496c:	2308      	movs	r3, #8
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004972:	e065      	b.n	8004a40 <UART_SetConfig+0x2c8>
 8004974:	2310      	movs	r3, #16
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497a:	bf00      	nop
 800497c:	e060      	b.n	8004a40 <UART_SetConfig+0x2c8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a4a      	ldr	r2, [pc, #296]	; (8004aac <UART_SetConfig+0x334>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d129      	bne.n	80049dc <UART_SetConfig+0x264>
 8004988:	4b44      	ldr	r3, [pc, #272]	; (8004a9c <UART_SetConfig+0x324>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004996:	d014      	beq.n	80049c2 <UART_SetConfig+0x24a>
 8004998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800499c:	d802      	bhi.n	80049a4 <UART_SetConfig+0x22c>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <UART_SetConfig+0x23a>
 80049a2:	e016      	b.n	80049d2 <UART_SetConfig+0x25a>
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a8:	d007      	beq.n	80049ba <UART_SetConfig+0x242>
 80049aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ae:	d00c      	beq.n	80049ca <UART_SetConfig+0x252>
 80049b0:	e00f      	b.n	80049d2 <UART_SetConfig+0x25a>
 80049b2:	2300      	movs	r3, #0
 80049b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b8:	e042      	b.n	8004a40 <UART_SetConfig+0x2c8>
 80049ba:	2302      	movs	r3, #2
 80049bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c0:	e03e      	b.n	8004a40 <UART_SetConfig+0x2c8>
 80049c2:	2304      	movs	r3, #4
 80049c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c8:	e03a      	b.n	8004a40 <UART_SetConfig+0x2c8>
 80049ca:	2308      	movs	r3, #8
 80049cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d0:	e036      	b.n	8004a40 <UART_SetConfig+0x2c8>
 80049d2:	2310      	movs	r3, #16
 80049d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d8:	bf00      	nop
 80049da:	e031      	b.n	8004a40 <UART_SetConfig+0x2c8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a2c      	ldr	r2, [pc, #176]	; (8004a94 <UART_SetConfig+0x31c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d129      	bne.n	8004a3a <UART_SetConfig+0x2c2>
 80049e6:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <UART_SetConfig+0x324>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f4:	d014      	beq.n	8004a20 <UART_SetConfig+0x2a8>
 80049f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fa:	d802      	bhi.n	8004a02 <UART_SetConfig+0x28a>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <UART_SetConfig+0x298>
 8004a00:	e016      	b.n	8004a30 <UART_SetConfig+0x2b8>
 8004a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a06:	d007      	beq.n	8004a18 <UART_SetConfig+0x2a0>
 8004a08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a0c:	d00c      	beq.n	8004a28 <UART_SetConfig+0x2b0>
 8004a0e:	e00f      	b.n	8004a30 <UART_SetConfig+0x2b8>
 8004a10:	2300      	movs	r3, #0
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a16:	e013      	b.n	8004a40 <UART_SetConfig+0x2c8>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1e:	e00f      	b.n	8004a40 <UART_SetConfig+0x2c8>
 8004a20:	2304      	movs	r3, #4
 8004a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a26:	e00b      	b.n	8004a40 <UART_SetConfig+0x2c8>
 8004a28:	2308      	movs	r3, #8
 8004a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2e:	e007      	b.n	8004a40 <UART_SetConfig+0x2c8>
 8004a30:	2310      	movs	r3, #16
 8004a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a36:	bf00      	nop
 8004a38:	e002      	b.n	8004a40 <UART_SetConfig+0x2c8>
 8004a3a:	2310      	movs	r3, #16
 8004a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <UART_SetConfig+0x31c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	f040 80fe 	bne.w	8004c48 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d837      	bhi.n	8004ac4 <UART_SetConfig+0x34c>
 8004a54:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0x2e4>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004ac5 	.word	0x08004ac5
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004ac5 	.word	0x08004ac5
 8004a6c:	08004ab5 	.word	0x08004ab5
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004ac5 	.word	0x08004ac5
 8004a78:	08004ac5 	.word	0x08004ac5
 8004a7c:	08004abd 	.word	0x08004abd
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004a80:	f7ff f856 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 8004a84:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a86:	e020      	b.n	8004aca <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <UART_SetConfig+0x338>)
 8004a8a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a8c:	e01d      	b.n	8004aca <UART_SetConfig+0x352>
 8004a8e:	bf00      	nop
 8004a90:	efff69f3 	.word	0xefff69f3
 8004a94:	40008000 	.word	0x40008000
 8004a98:	40013800 	.word	0x40013800
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40004400 	.word	0x40004400
 8004aa4:	40004800 	.word	0x40004800
 8004aa8:	40004c00 	.word	0x40004c00
 8004aac:	40005000 	.word	0x40005000
 8004ab0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004ab4:	f7fe ffa6 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 8004ab8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004aba:	e006      	b.n	8004aca <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004abc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ac0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ac2:	e002      	b.n	8004aca <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	76fb      	strb	r3, [r7, #27]
        break;
 8004ac8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 81b9 	beq.w	8004e44 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4413      	add	r3, r2
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d305      	bcc.n	8004aee <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d902      	bls.n	8004af4 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	76fb      	strb	r3, [r7, #27]
 8004af2:	e1a7      	b.n	8004e44 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	f200 8092 	bhi.w	8004c22 <UART_SetConfig+0x4aa>
 8004afe:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <UART_SetConfig+0x38c>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b29 	.word	0x08004b29
 8004b08:	08004c23 	.word	0x08004c23
 8004b0c:	08004b77 	.word	0x08004b77
 8004b10:	08004c23 	.word	0x08004c23
 8004b14:	08004bab 	.word	0x08004bab
 8004b18:	08004c23 	.word	0x08004c23
 8004b1c:	08004c23 	.word	0x08004c23
 8004b20:	08004c23 	.word	0x08004c23
 8004b24:	08004bf9 	.word	0x08004bf9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004b28:	f7ff f802 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 8004b2c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	4619      	mov	r1, r3
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	f04f 0400 	mov.w	r4, #0
 8004b3e:	0214      	lsls	r4, r2, #8
 8004b40:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004b44:	020b      	lsls	r3, r1, #8
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6852      	ldr	r2, [r2, #4]
 8004b4a:	0852      	lsrs	r2, r2, #1
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	f04f 0200 	mov.w	r2, #0
 8004b52:	eb13 0b01 	adds.w	fp, r3, r1
 8004b56:	eb44 0c02 	adc.w	ip, r4, r2
 8004b5a:	4658      	mov	r0, fp
 8004b5c:	4661      	mov	r1, ip
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f04f 0400 	mov.w	r4, #0
 8004b66:	461a      	mov	r2, r3
 8004b68:	4623      	mov	r3, r4
 8004b6a:	f7fb fb2d 	bl	80001c8 <__aeabi_uldivmod>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	460c      	mov	r4, r1
 8004b72:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004b74:	e058      	b.n	8004c28 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	f04f 0400 	mov.w	r4, #0
 8004b80:	49ae      	ldr	r1, [pc, #696]	; (8004e3c <UART_SetConfig+0x6c4>)
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	eb13 0b01 	adds.w	fp, r3, r1
 8004b8a:	eb44 0c02 	adc.w	ip, r4, r2
 8004b8e:	4658      	mov	r0, fp
 8004b90:	4661      	mov	r1, ip
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f04f 0400 	mov.w	r4, #0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	f7fb fb13 	bl	80001c8 <__aeabi_uldivmod>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004ba8:	e03e      	b.n	8004c28 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004baa:	f7fe ff2b 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 8004bae:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	f04f 0400 	mov.w	r4, #0
 8004bc0:	0214      	lsls	r4, r2, #8
 8004bc2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004bc6:	020b      	lsls	r3, r1, #8
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6852      	ldr	r2, [r2, #4]
 8004bcc:	0852      	lsrs	r2, r2, #1
 8004bce:	4611      	mov	r1, r2
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	eb13 0b01 	adds.w	fp, r3, r1
 8004bd8:	eb44 0c02 	adc.w	ip, r4, r2
 8004bdc:	4658      	mov	r0, fp
 8004bde:	4661      	mov	r1, ip
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f04f 0400 	mov.w	r4, #0
 8004be8:	461a      	mov	r2, r3
 8004bea:	4623      	mov	r3, r4
 8004bec:	f7fb faec 	bl	80001c8 <__aeabi_uldivmod>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004bf6:	e017      	b.n	8004c28 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	085b      	lsrs	r3, r3, #1
 8004bfe:	f04f 0400 	mov.w	r4, #0
 8004c02:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004c06:	f144 0100 	adc.w	r1, r4, #0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f04f 0400 	mov.w	r4, #0
 8004c12:	461a      	mov	r2, r3
 8004c14:	4623      	mov	r3, r4
 8004c16:	f7fb fad7 	bl	80001c8 <__aeabi_uldivmod>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	460c      	mov	r4, r1
 8004c1e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c20:	e002      	b.n	8004c28 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	76fb      	strb	r3, [r7, #27]
            break;
 8004c26:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2e:	d308      	bcc.n	8004c42 <UART_SetConfig+0x4ca>
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c36:	d204      	bcs.n	8004c42 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	60da      	str	r2, [r3, #12]
 8004c40:	e100      	b.n	8004e44 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	76fb      	strb	r3, [r7, #27]
 8004c46:	e0fd      	b.n	8004e44 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c50:	f040 8084 	bne.w	8004d5c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004c54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d85f      	bhi.n	8004d1c <UART_SetConfig+0x5a4>
 8004c5c:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <UART_SetConfig+0x4ec>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004c89 	.word	0x08004c89
 8004c68:	08004ca9 	.word	0x08004ca9
 8004c6c:	08004cc9 	.word	0x08004cc9
 8004c70:	08004d1d 	.word	0x08004d1d
 8004c74:	08004ce5 	.word	0x08004ce5
 8004c78:	08004d1d 	.word	0x08004d1d
 8004c7c:	08004d1d 	.word	0x08004d1d
 8004c80:	08004d1d 	.word	0x08004d1d
 8004c84:	08004d05 	.word	0x08004d05
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c88:	f7fe ff52 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 8004c8c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	005a      	lsls	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	441a      	add	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ca6:	e03c      	b.n	8004d22 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca8:	f7fe ff58 	bl	8003b5c <HAL_RCC_GetPCLK2Freq>
 8004cac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	005a      	lsls	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	441a      	add	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cc6:	e02c      	b.n	8004d22 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004cd2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6852      	ldr	r2, [r2, #4]
 8004cda:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ce2:	e01e      	b.n	8004d22 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce4:	f7fe fe8e 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 8004ce8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	005a      	lsls	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	441a      	add	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d02:	e00e      	b.n	8004d22 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	085b      	lsrs	r3, r3, #1
 8004d0a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d1a:	e002      	b.n	8004d22 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	76fb      	strb	r3, [r7, #27]
        break;
 8004d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	2b0f      	cmp	r3, #15
 8004d26:	d916      	bls.n	8004d56 <UART_SetConfig+0x5de>
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2e:	d212      	bcs.n	8004d56 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	f023 030f 	bic.w	r3, r3, #15
 8004d38:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	89fb      	ldrh	r3, [r7, #14]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	89fa      	ldrh	r2, [r7, #14]
 8004d52:	60da      	str	r2, [r3, #12]
 8004d54:	e076      	b.n	8004e44 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	76fb      	strb	r3, [r7, #27]
 8004d5a:	e073      	b.n	8004e44 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d85c      	bhi.n	8004e1e <UART_SetConfig+0x6a6>
 8004d64:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <UART_SetConfig+0x5f4>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004daf 	.word	0x08004daf
 8004d74:	08004dcd 	.word	0x08004dcd
 8004d78:	08004e1f 	.word	0x08004e1f
 8004d7c:	08004de9 	.word	0x08004de9
 8004d80:	08004e1f 	.word	0x08004e1f
 8004d84:	08004e1f 	.word	0x08004e1f
 8004d88:	08004e1f 	.word	0x08004e1f
 8004d8c:	08004e07 	.word	0x08004e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d90:	f7fe fece 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 8004d94:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	085a      	lsrs	r2, r3, #1
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	441a      	add	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dac:	e03a      	b.n	8004e24 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dae:	f7fe fed5 	bl	8003b5c <HAL_RCC_GetPCLK2Freq>
 8004db2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	085a      	lsrs	r2, r3, #1
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	441a      	add	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004dca:	e02b      	b.n	8004e24 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004dd6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6852      	ldr	r2, [r2, #4]
 8004dde:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004de6:	e01d      	b.n	8004e24 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de8:	f7fe fe0c 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 8004dec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	085a      	lsrs	r2, r3, #1
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	441a      	add	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e04:	e00e      	b.n	8004e24 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	085b      	lsrs	r3, r3, #1
 8004e0c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e1c:	e002      	b.n	8004e24 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	76fb      	strb	r3, [r7, #27]
        break;
 8004e22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	2b0f      	cmp	r3, #15
 8004e28:	d90a      	bls.n	8004e40 <UART_SetConfig+0x6c8>
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e30:	d206      	bcs.n	8004e40 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	60da      	str	r2, [r3, #12]
 8004e3a:	e003      	b.n	8004e44 <UART_SetConfig+0x6cc>
 8004e3c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e50:	7efb      	ldrb	r3, [r7, #27]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3728      	adds	r7, #40	; 0x28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01a      	beq.n	8004f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f5a:	d10a      	bne.n	8004f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	605a      	str	r2, [r3, #4]
  }
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004fae:	f7fc f939 	bl	8001224 <HAL_GetTick>
 8004fb2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d10e      	bne.n	8004fe0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f82a 	bl	800502a <UART_WaitOnFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e020      	b.n	8005022 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d10e      	bne.n	800500c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f814 	bl	800502a <UART_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e00a      	b.n	8005022 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	603b      	str	r3, [r7, #0]
 8005036:	4613      	mov	r3, r2
 8005038:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503a:	e05d      	b.n	80050f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d059      	beq.n	80050f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005044:	f7fc f8ee 	bl	8001224 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	429a      	cmp	r2, r3
 8005052:	d302      	bcc.n	800505a <UART_WaitOnFlagUntilTimeout+0x30>
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d11b      	bne.n	8005092 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005068:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0201 	bic.w	r2, r2, #1
 8005078:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e042      	b.n	8005118 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d02b      	beq.n	80050f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ae:	d123      	bne.n	80050f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050b8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050c8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e00f      	b.n	8005118 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69da      	ldr	r2, [r3, #28]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4013      	ands	r3, r2
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	429a      	cmp	r2, r3
 8005106:	bf0c      	ite	eq
 8005108:	2301      	moveq	r3, #1
 800510a:	2300      	movne	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	429a      	cmp	r2, r3
 8005114:	d092      	beq.n	800503c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005120:	b084      	sub	sp, #16
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	f107 001c 	add.w	r0, r7, #28
 800512e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	2b01      	cmp	r3, #1
 8005136:	d122      	bne.n	800517e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800514c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005162:	2b01      	cmp	r3, #1
 8005164:	d105      	bne.n	8005172 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f001 f9c8 	bl	8006508 <USB_CoreReset>
 8005178:	4603      	mov	r3, r0
 800517a:	73fb      	strb	r3, [r7, #15]
 800517c:	e01a      	b.n	80051b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 f9bc 	bl	8006508 <USB_CoreReset>
 8005190:	4603      	mov	r3, r0
 8005192:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	639a      	str	r2, [r3, #56]	; 0x38
 80051a6:	e005      	b.n	80051b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051c0:	b004      	add	sp, #16
 80051c2:	4770      	bx	lr

080051c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	4613      	mov	r3, r2
 80051d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d165      	bne.n	80052a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4a3e      	ldr	r2, [pc, #248]	; (80052d4 <USB_SetTurnaroundTime+0x110>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d906      	bls.n	80051ee <USB_SetTurnaroundTime+0x2a>
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4a3d      	ldr	r2, [pc, #244]	; (80052d8 <USB_SetTurnaroundTime+0x114>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d802      	bhi.n	80051ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051e8:	230f      	movs	r3, #15
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	e05c      	b.n	80052a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4a39      	ldr	r2, [pc, #228]	; (80052d8 <USB_SetTurnaroundTime+0x114>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d906      	bls.n	8005204 <USB_SetTurnaroundTime+0x40>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4a38      	ldr	r2, [pc, #224]	; (80052dc <USB_SetTurnaroundTime+0x118>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d802      	bhi.n	8005204 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051fe:	230e      	movs	r3, #14
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	e051      	b.n	80052a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4a35      	ldr	r2, [pc, #212]	; (80052dc <USB_SetTurnaroundTime+0x118>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d906      	bls.n	800521a <USB_SetTurnaroundTime+0x56>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4a34      	ldr	r2, [pc, #208]	; (80052e0 <USB_SetTurnaroundTime+0x11c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d802      	bhi.n	800521a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005214:	230d      	movs	r3, #13
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	e046      	b.n	80052a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4a30      	ldr	r2, [pc, #192]	; (80052e0 <USB_SetTurnaroundTime+0x11c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d906      	bls.n	8005230 <USB_SetTurnaroundTime+0x6c>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4a2f      	ldr	r2, [pc, #188]	; (80052e4 <USB_SetTurnaroundTime+0x120>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d802      	bhi.n	8005230 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800522a:	230c      	movs	r3, #12
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e03b      	b.n	80052a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4a2c      	ldr	r2, [pc, #176]	; (80052e4 <USB_SetTurnaroundTime+0x120>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d906      	bls.n	8005246 <USB_SetTurnaroundTime+0x82>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4a2b      	ldr	r2, [pc, #172]	; (80052e8 <USB_SetTurnaroundTime+0x124>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d802      	bhi.n	8005246 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005240:	230b      	movs	r3, #11
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	e030      	b.n	80052a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <USB_SetTurnaroundTime+0x124>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d906      	bls.n	800525c <USB_SetTurnaroundTime+0x98>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	4a26      	ldr	r2, [pc, #152]	; (80052ec <USB_SetTurnaroundTime+0x128>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d802      	bhi.n	800525c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005256:	230a      	movs	r3, #10
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e025      	b.n	80052a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4a23      	ldr	r2, [pc, #140]	; (80052ec <USB_SetTurnaroundTime+0x128>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d906      	bls.n	8005272 <USB_SetTurnaroundTime+0xae>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4a22      	ldr	r2, [pc, #136]	; (80052f0 <USB_SetTurnaroundTime+0x12c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d802      	bhi.n	8005272 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800526c:	2309      	movs	r3, #9
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	e01a      	b.n	80052a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	4a1e      	ldr	r2, [pc, #120]	; (80052f0 <USB_SetTurnaroundTime+0x12c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d906      	bls.n	8005288 <USB_SetTurnaroundTime+0xc4>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4a1d      	ldr	r2, [pc, #116]	; (80052f4 <USB_SetTurnaroundTime+0x130>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d802      	bhi.n	8005288 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005282:	2308      	movs	r3, #8
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	e00f      	b.n	80052a8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4a1a      	ldr	r2, [pc, #104]	; (80052f4 <USB_SetTurnaroundTime+0x130>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d906      	bls.n	800529e <USB_SetTurnaroundTime+0xda>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4a19      	ldr	r2, [pc, #100]	; (80052f8 <USB_SetTurnaroundTime+0x134>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d802      	bhi.n	800529e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005298:	2307      	movs	r3, #7
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	e004      	b.n	80052a8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800529e:	2306      	movs	r3, #6
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	e001      	b.n	80052a8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80052a4:	2309      	movs	r3, #9
 80052a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	029b      	lsls	r3, r3, #10
 80052bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80052c0:	431a      	orrs	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	00d8acbf 	.word	0x00d8acbf
 80052d8:	00e4e1bf 	.word	0x00e4e1bf
 80052dc:	00f423ff 	.word	0x00f423ff
 80052e0:	0106737f 	.word	0x0106737f
 80052e4:	011a499f 	.word	0x011a499f
 80052e8:	01312cff 	.word	0x01312cff
 80052ec:	014ca43f 	.word	0x014ca43f
 80052f0:	016e35ff 	.word	0x016e35ff
 80052f4:	01a6ab1f 	.word	0x01a6ab1f
 80052f8:	01e847ff 	.word	0x01e847ff

080052fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f043 0201 	orr.w	r2, r3, #1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f023 0201 	bic.w	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d106      	bne.n	800536c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	60da      	str	r2, [r3, #12]
 800536a:	e00b      	b.n	8005384 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	e001      	b.n	8005384 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e003      	b.n	800538c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005384:	2032      	movs	r0, #50	; 0x32
 8005386:	f7fb ff59 	bl	800123c <HAL_Delay>

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005394:	b084      	sub	sp, #16
 8005396:	b580      	push	{r7, lr}
 8005398:	b086      	sub	sp, #24
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	e009      	b.n	80053c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	3340      	adds	r3, #64	; 0x40
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	2200      	movs	r2, #0
 80053c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	3301      	adds	r3, #1
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b0e      	cmp	r3, #14
 80053cc:	d9f2      	bls.n	80053b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d11c      	bne.n	800540e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053e2:	f043 0302 	orr.w	r3, r3, #2
 80053e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	e005      	b.n	800541a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005420:	461a      	mov	r2, r3
 8005422:	2300      	movs	r3, #0
 8005424:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542c:	4619      	mov	r1, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005434:	461a      	mov	r2, r3
 8005436:	680b      	ldr	r3, [r1, #0]
 8005438:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800543a:	2103      	movs	r1, #3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f93d 	bl	80056bc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005442:	2110      	movs	r1, #16
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f8f1 	bl	800562c <USB_FlushTxFifo>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f90f 	bl	8005678 <USB_FlushRxFifo>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546a:	461a      	mov	r2, r3
 800546c:	2300      	movs	r3, #0
 800546e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	461a      	mov	r2, r3
 8005478:	2300      	movs	r3, #0
 800547a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	461a      	mov	r2, r3
 8005484:	2300      	movs	r3, #0
 8005486:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	e043      	b.n	8005516 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054a4:	d118      	bne.n	80054d8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b8:	461a      	mov	r2, r3
 80054ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	e013      	b.n	80054ea <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ce:	461a      	mov	r2, r3
 80054d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	e008      	b.n	80054ea <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	461a      	mov	r2, r3
 80054e6:	2300      	movs	r3, #0
 80054e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f6:	461a      	mov	r2, r3
 80054f8:	2300      	movs	r3, #0
 80054fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	461a      	mov	r2, r3
 800550a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800550e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	3301      	adds	r3, #1
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	429a      	cmp	r2, r3
 800551c:	d3b7      	bcc.n	800548e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e043      	b.n	80055ac <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800553a:	d118      	bne.n	800556e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554e:	461a      	mov	r2, r3
 8005550:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e013      	b.n	8005580 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005564:	461a      	mov	r2, r3
 8005566:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	e008      	b.n	8005580 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	461a      	mov	r2, r3
 800557c:	2300      	movs	r3, #0
 800557e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558c:	461a      	mov	r2, r3
 800558e:	2300      	movs	r3, #0
 8005590:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559e:	461a      	mov	r2, r3
 80055a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	3301      	adds	r3, #1
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d3b7      	bcc.n	8005524 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f043 0210 	orr.w	r2, r3, #16
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	4b10      	ldr	r3, [pc, #64]	; (8005628 <USB_DevInit+0x294>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	f043 0208 	orr.w	r2, r3, #8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005602:	2b01      	cmp	r3, #1
 8005604:	d107      	bne.n	8005616 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800560e:	f043 0304 	orr.w	r3, r3, #4
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005616:	7dfb      	ldrb	r3, [r7, #23]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005622:	b004      	add	sp, #16
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	803c3800 	.word	0x803c3800

0800562c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	019b      	lsls	r3, r3, #6
 800563e:	f043 0220 	orr.w	r2, r3, #32
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3301      	adds	r3, #1
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4a09      	ldr	r2, [pc, #36]	; (8005674 <USB_FlushTxFifo+0x48>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d901      	bls.n	8005658 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e006      	b.n	8005666 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b20      	cmp	r3, #32
 8005662:	d0f0      	beq.n	8005646 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	00030d40 	.word	0x00030d40

08005678 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2210      	movs	r2, #16
 8005688:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4a09      	ldr	r2, [pc, #36]	; (80056b8 <USB_FlushRxFifo+0x40>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d901      	bls.n	800569c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e006      	b.n	80056aa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d0f0      	beq.n	800568a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	00030d40 	.word	0x00030d40

080056bc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056dc:	4313      	orrs	r3, r2
 80056de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b087      	sub	sp, #28
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 0306 	and.w	r3, r3, #6
 8005706:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d002      	beq.n	8005714 <USB_GetDevSpeed+0x26>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b06      	cmp	r3, #6
 8005712:	d102      	bne.n	800571a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005714:	2302      	movs	r3, #2
 8005716:	75fb      	strb	r3, [r7, #23]
 8005718:	e001      	b.n	800571e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800571a:	230f      	movs	r3, #15
 800571c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800571e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005720:	4618      	mov	r0, r3
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	785b      	ldrb	r3, [r3, #1]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d13a      	bne.n	80057be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	2101      	movs	r1, #1
 800575a:	fa01 f303 	lsl.w	r3, r1, r3
 800575e:	b29b      	uxth	r3, r3
 8005760:	68f9      	ldr	r1, [r7, #12]
 8005762:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005766:	4313      	orrs	r3, r2
 8005768:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d155      	bne.n	800582c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	78db      	ldrb	r3, [r3, #3]
 800579a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800579c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	059b      	lsls	r3, r3, #22
 80057a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80057a4:	4313      	orrs	r3, r2
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	e036      	b.n	800582c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c4:	69da      	ldr	r2, [r3, #28]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	2101      	movs	r1, #1
 80057d0:	fa01 f303 	lsl.w	r3, r1, r3
 80057d4:	041b      	lsls	r3, r3, #16
 80057d6:	68f9      	ldr	r1, [r7, #12]
 80057d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057dc:	4313      	orrs	r3, r2
 80057de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d11a      	bne.n	800582c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	78db      	ldrb	r3, [r3, #3]
 8005810:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005812:	430b      	orrs	r3, r1
 8005814:	4313      	orrs	r3, r2
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800582a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d161      	bne.n	800591c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800586a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800586e:	d11f      	bne.n	80058b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800588e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	0151      	lsls	r1, r2, #5
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	440a      	add	r2, r1
 80058a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	2101      	movs	r1, #1
 80058c2:	fa01 f303 	lsl.w	r3, r1, r3
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	43db      	mvns	r3, r3
 80058ca:	68f9      	ldr	r1, [r7, #12]
 80058cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d0:	4013      	ands	r3, r2
 80058d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	69da      	ldr	r2, [r3, #28]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	2101      	movs	r1, #1
 80058e6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	68f9      	ldr	r1, [r7, #12]
 80058f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058f4:	4013      	ands	r3, r2
 80058f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	0159      	lsls	r1, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	440b      	add	r3, r1
 800590e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005912:	4619      	mov	r1, r3
 8005914:	4b35      	ldr	r3, [pc, #212]	; (80059ec <USB_DeactivateEndpoint+0x1b0>)
 8005916:	4013      	ands	r3, r2
 8005918:	600b      	str	r3, [r1, #0]
 800591a:	e060      	b.n	80059de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800592e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005932:	d11f      	bne.n	8005974 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005952:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005972:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	f003 030f 	and.w	r3, r3, #15
 8005984:	2101      	movs	r1, #1
 8005986:	fa01 f303 	lsl.w	r3, r1, r3
 800598a:	041b      	lsls	r3, r3, #16
 800598c:	43db      	mvns	r3, r3
 800598e:	68f9      	ldr	r1, [r7, #12]
 8005990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005994:	4013      	ands	r3, r2
 8005996:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	2101      	movs	r1, #1
 80059aa:	fa01 f303 	lsl.w	r3, r1, r3
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	43db      	mvns	r3, r3
 80059b2:	68f9      	ldr	r1, [r7, #12]
 80059b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b8:	4013      	ands	r3, r2
 80059ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	0159      	lsls	r1, r3, #5
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	440b      	add	r3, r1
 80059d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d6:	4619      	mov	r1, r3
 80059d8:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <USB_DeactivateEndpoint+0x1b4>)
 80059da:	4013      	ands	r3, r2
 80059dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	ec337800 	.word	0xec337800
 80059f0:	eff37800 	.word	0xeff37800

080059f4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	f040 810a 	bne.w	8005c26 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d132      	bne.n	8005a80 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	0151      	lsls	r1, r2, #5
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	440a      	add	r2, r1
 8005a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a78:	0cdb      	lsrs	r3, r3, #19
 8005a7a:	04db      	lsls	r3, r3, #19
 8005a7c:	6113      	str	r3, [r2, #16]
 8005a7e:	e074      	b.n	8005b6a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	0151      	lsls	r1, r2, #5
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	440a      	add	r2, r1
 8005a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a9a:	0cdb      	lsrs	r3, r3, #19
 8005a9c:	04db      	lsls	r3, r3, #19
 8005a9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005abe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ac2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6959      	ldr	r1, [r3, #20]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	440b      	add	r3, r1
 8005adc:	1e59      	subs	r1, r3, #1
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ae6:	04d9      	lsls	r1, r3, #19
 8005ae8:	4baf      	ldr	r3, [pc, #700]	; (8005da8 <USB_EPStartXfer+0x3b4>)
 8005aea:	400b      	ands	r3, r1
 8005aec:	6939      	ldr	r1, [r7, #16]
 8005aee:	0148      	lsls	r0, r1, #5
 8005af0:	6979      	ldr	r1, [r7, #20]
 8005af2:	4401      	add	r1, r0
 8005af4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005af8:	4313      	orrs	r3, r2
 8005afa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b12:	6939      	ldr	r1, [r7, #16]
 8005b14:	0148      	lsls	r0, r1, #5
 8005b16:	6979      	ldr	r1, [r7, #20]
 8005b18:	4401      	add	r1, r0
 8005b1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	78db      	ldrb	r3, [r3, #3]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d11f      	bne.n	8005b6a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b48:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	0151      	lsls	r1, r2, #5
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b68:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	0151      	lsls	r1, r2, #5
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	440a      	add	r2, r1
 8005b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b88:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	78db      	ldrb	r3, [r3, #3]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d015      	beq.n	8005bbe <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8100 	beq.w	8005d9c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	2101      	movs	r1, #1
 8005bae:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb2:	6979      	ldr	r1, [r7, #20]
 8005bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	634b      	str	r3, [r1, #52]	; 0x34
 8005bbc:	e0ee      	b.n	8005d9c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d110      	bne.n	8005bf0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	e00f      	b.n	8005c10 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	68d9      	ldr	r1, [r3, #12]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781a      	ldrb	r2, [r3, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f9e2 	bl	8005fe8 <USB_WritePacket>
 8005c24:	e0ba      	b.n	8005d9c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c40:	0cdb      	lsrs	r3, r3, #19
 8005c42:	04db      	lsls	r3, r3, #19
 8005c44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d123      	bne.n	8005cba <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c88:	6939      	ldr	r1, [r7, #16]
 8005c8a:	0148      	lsls	r0, r1, #5
 8005c8c:	6979      	ldr	r1, [r7, #20]
 8005c8e:	4401      	add	r1, r0
 8005c90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c94:	4313      	orrs	r3, r2
 8005c96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cb6:	6113      	str	r3, [r2, #16]
 8005cb8:	e033      	b.n	8005d22 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	695a      	ldr	r2, [r3, #20]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	1e5a      	subs	r2, r3, #1
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cce:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	89fb      	ldrh	r3, [r7, #14]
 8005ce0:	04d9      	lsls	r1, r3, #19
 8005ce2:	4b31      	ldr	r3, [pc, #196]	; (8005da8 <USB_EPStartXfer+0x3b4>)
 8005ce4:	400b      	ands	r3, r1
 8005ce6:	6939      	ldr	r1, [r7, #16]
 8005ce8:	0148      	lsls	r0, r1, #5
 8005cea:	6979      	ldr	r1, [r7, #20]
 8005cec:	4401      	add	r1, r0
 8005cee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	89f9      	ldrh	r1, [r7, #14]
 8005d0a:	fb01 f303 	mul.w	r3, r1, r3
 8005d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d12:	6939      	ldr	r1, [r7, #16]
 8005d14:	0148      	lsls	r0, r1, #5
 8005d16:	6979      	ldr	r1, [r7, #20]
 8005d18:	4401      	add	r1, r0
 8005d1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	78db      	ldrb	r3, [r3, #3]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d128      	bne.n	8005d7c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d110      	bne.n	8005d5c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	e00f      	b.n	8005d7c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	1ff80000 	.word	0x1ff80000

08005dac <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	f040 80ab 	bne.w	8005f20 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d132      	bne.n	8005e38 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005df0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005df4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	0151      	lsls	r1, r2, #5
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	440a      	add	r2, r1
 8005e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e30:	0cdb      	lsrs	r3, r3, #19
 8005e32:	04db      	lsls	r3, r3, #19
 8005e34:	6113      	str	r3, [r2, #16]
 8005e36:	e04e      	b.n	8005ed6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e52:	0cdb      	lsrs	r3, r3, #19
 8005e54:	04db      	lsls	r3, r3, #19
 8005e56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	0151      	lsls	r1, r2, #5
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	440a      	add	r2, r1
 8005e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	695a      	ldr	r2, [r3, #20]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d903      	bls.n	8005e90 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	0148      	lsls	r0, r1, #5
 8005eca:	68f9      	ldr	r1, [r7, #12]
 8005ecc:	4401      	add	r1, r0
 8005ece:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ef4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d06d      	beq.n	8005fda <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	2101      	movs	r1, #1
 8005f10:	fa01 f303 	lsl.w	r3, r1, r3
 8005f14:	68f9      	ldr	r1, [r7, #12]
 8005f16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	634b      	str	r3, [r1, #52]	; 0x34
 8005f1e:	e05c      	b.n	8005fda <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3a:	0cdb      	lsrs	r3, r3, #19
 8005f3c:	04db      	lsls	r3, r3, #19
 8005f3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	0148      	lsls	r0, r1, #5
 8005fae:	68f9      	ldr	r1, [r7, #12]
 8005fb0:	4401      	add	r1, r0
 8005fb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	0151      	lsls	r1, r2, #5
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	440a      	add	r2, r1
 8005fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fd8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b089      	sub	sp, #36	; 0x24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	71fb      	strb	r3, [r7, #7]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006006:	88bb      	ldrh	r3, [r7, #4]
 8006008:	3303      	adds	r3, #3
 800600a:	089b      	lsrs	r3, r3, #2
 800600c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800600e:	2300      	movs	r3, #0
 8006010:	61bb      	str	r3, [r7, #24]
 8006012:	e00f      	b.n	8006034 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	031a      	lsls	r2, r3, #12
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	4413      	add	r3, r2
 800601c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006020:	461a      	mov	r2, r3
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	3304      	adds	r3, #4
 800602c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	3301      	adds	r3, #1
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	429a      	cmp	r2, r3
 800603a:	d3eb      	bcc.n	8006014 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3724      	adds	r7, #36	; 0x24
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800604a:	b480      	push	{r7}
 800604c:	b089      	sub	sp, #36	; 0x24
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	4613      	mov	r3, r2
 8006056:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	3303      	adds	r3, #3
 8006064:	089b      	lsrs	r3, r3, #2
 8006066:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e00b      	b.n	8006086 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	601a      	str	r2, [r3, #0]
    pDest++;
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	3304      	adds	r3, #4
 800607e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	3301      	adds	r3, #1
 8006084:	61bb      	str	r3, [r7, #24]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	429a      	cmp	r2, r3
 800608c:	d3ef      	bcc.n	800606e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800608e:	69fb      	ldr	r3, [r7, #28]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3724      	adds	r7, #36	; 0x24
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	785b      	ldrb	r3, [r3, #1]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d12c      	bne.n	8006112 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	db12      	blt.n	80060f0 <USB_EPSetStall+0x54>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00f      	beq.n	80060f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	0151      	lsls	r1, r2, #5
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	440a      	add	r2, r1
 8006106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	e02b      	b.n	800616a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	db12      	blt.n	800614a <USB_EPSetStall+0xae>
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00f      	beq.n	800614a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	440a      	add	r2, r1
 8006140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006144:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006148:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	440a      	add	r2, r1
 8006160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006168:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d128      	bne.n	80061e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	78db      	ldrb	r3, [r3, #3]
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d003      	beq.n	80061c4 <USB_EPClearStall+0x4c>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	78db      	ldrb	r3, [r3, #3]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d138      	bne.n	8006236 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	e027      	b.n	8006236 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006200:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006204:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	78db      	ldrb	r3, [r3, #3]
 800620a:	2b03      	cmp	r3, #3
 800620c:	d003      	beq.n	8006216 <USB_EPClearStall+0x9e>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	78db      	ldrb	r3, [r3, #3]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d10f      	bne.n	8006236 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	0151      	lsls	r1, r2, #5
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	440a      	add	r2, r1
 800622c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006234:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006262:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006266:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006278:	68f9      	ldr	r1, [r7, #12]
 800627a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800627e:	4313      	orrs	r3, r2
 8006280:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062aa:	f023 0302 	bic.w	r3, r3, #2
 80062ae:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80062b0:	2003      	movs	r0, #3
 80062b2:	f7fa ffc3 	bl	800123c <HAL_Delay>

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062da:	f043 0302 	orr.w	r3, r3, #2
 80062de:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80062e0:	2003      	movs	r0, #3
 80062e2:	f7fa ffab 	bl	800123c <HAL_Delay>

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4013      	ands	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006308:	68fb      	ldr	r3, [r7, #12]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	4013      	ands	r3, r2
 8006338:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	0c1b      	lsrs	r3, r3, #16
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	4013      	ands	r3, r2
 800636c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	b29b      	uxth	r3, r3
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	460b      	mov	r3, r1
 8006388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4013      	ands	r3, r2
 80063aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063ac:	68bb      	ldr	r3, [r7, #8]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b087      	sub	sp, #28
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	460b      	mov	r3, r1
 80063c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ea:	01db      	lsls	r3, r3, #7
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4013      	ands	r3, r2
 8006406:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006408:	68bb      	ldr	r3, [r7, #8]
}
 800640a:	4618      	mov	r0, r3
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f003 0301 	and.w	r3, r3, #1
}
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006450:	f023 0307 	bic.w	r3, r3, #7
 8006454:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006468:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	333c      	adds	r3, #60	; 0x3c
 800648a:	3304      	adds	r3, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4a1c      	ldr	r2, [pc, #112]	; (8006504 <USB_EP0_OutStart+0x8c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d90a      	bls.n	80064ae <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064a8:	d101      	bne.n	80064ae <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e024      	b.n	80064f8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b4:	461a      	mov	r2, r3
 80064b6:	2300      	movs	r3, #0
 80064b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064dc:	f043 0318 	orr.w	r3, r3, #24
 80064e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064f4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	4f54300a 	.word	0x4f54300a

08006508 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a13      	ldr	r2, [pc, #76]	; (800656c <USB_CoreReset+0x64>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e01b      	b.n	800655e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	daf2      	bge.n	8006514 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f043 0201 	orr.w	r2, r3, #1
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4a09      	ldr	r2, [pc, #36]	; (800656c <USB_CoreReset+0x64>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d901      	bls.n	8006550 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e006      	b.n	800655e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b01      	cmp	r3, #1
 800655a:	d0f0      	beq.n	800653e <USB_CoreReset+0x36>

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	00030d40 	.word	0x00030d40

08006570 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8006580:	2302      	movs	r3, #2
 8006582:	2203      	movs	r2, #3
 8006584:	2181      	movs	r1, #129	; 0x81
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f001 fea0 	bl	80082cc <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8006592:	2302      	movs	r3, #2
 8006594:	2203      	movs	r2, #3
 8006596:	2101      	movs	r1, #1
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 fe97 	bl	80082cc <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80065a6:	2018      	movs	r0, #24
 80065a8:	f002 f894 	bl	80086d4 <USBD_static_malloc>
 80065ac:	4602      	mov	r2, r0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d102      	bne.n	80065c4 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80065be:	2301      	movs	r3, #1
 80065c0:	73fb      	strb	r3, [r7, #15]
 80065c2:	e011      	b.n	80065e8 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ca:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2200      	movs	r2, #0
 80065d0:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	2302      	movs	r3, #2
 80065e0:	2101      	movs	r1, #1
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 ffee 	bl	80085c4 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	460b      	mov	r3, r1
 80065fc:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80065fe:	2181      	movs	r1, #129	; 0x81
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 fea1 	bl	8008348 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800660c:	2101      	movs	r1, #1
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f001 fe9a 	bl	8008348 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00e      	beq.n	8006644 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006636:	4618      	mov	r0, r3
 8006638:	f002 f85a 	bl	80086f0 <USBD_static_free>
    pdev->pClassData = NULL;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006660:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800667a:	2b00      	cmp	r3, #0
 800667c:	d051      	beq.n	8006722 <USBD_CUSTOM_HID_Setup+0xd2>
 800667e:	2b20      	cmp	r3, #32
 8006680:	f040 80d8 	bne.w	8006834 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	785b      	ldrb	r3, [r3, #1]
 8006688:	3b02      	subs	r3, #2
 800668a:	2b09      	cmp	r3, #9
 800668c:	d841      	bhi.n	8006712 <USBD_CUSTOM_HID_Setup+0xc2>
 800668e:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <USBD_CUSTOM_HID_Setup+0x44>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066ed 	.word	0x080066ed
 8006698:	080066cb 	.word	0x080066cb
 800669c:	08006713 	.word	0x08006713
 80066a0:	08006713 	.word	0x08006713
 80066a4:	08006713 	.word	0x08006713
 80066a8:	08006713 	.word	0x08006713
 80066ac:	08006713 	.word	0x08006713
 80066b0:	080066fd 	.word	0x080066fd
 80066b4:	080066db 	.word	0x080066db
 80066b8:	080066bd 	.word	0x080066bd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	885b      	ldrh	r3, [r3, #2]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	461a      	mov	r2, r3
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	605a      	str	r2, [r3, #4]
          break;
 80066c8:	e02a      	b.n	8006720 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	3304      	adds	r3, #4
 80066ce:	2201      	movs	r2, #1
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 f9fe 	bl	8007ad4 <USBD_CtlSendData>
          break;
 80066d8:	e022      	b.n	8006720 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	885b      	ldrh	r3, [r3, #2]
 80066de:	0a1b      	lsrs	r3, r3, #8
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	609a      	str	r2, [r3, #8]
          break;
 80066ea:	e019      	b.n	8006720 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	3308      	adds	r3, #8
 80066f0:	2201      	movs	r2, #1
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f001 f9ed 	bl	8007ad4 <USBD_CtlSendData>
          break;
 80066fa:	e011      	b.n	8006720 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	2201      	movs	r2, #1
 8006700:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8006702:	6939      	ldr	r1, [r7, #16]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	88db      	ldrh	r3, [r3, #6]
 8006708:	461a      	mov	r2, r3
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 fa10 	bl	8007b30 <USBD_CtlPrepareRx>
          break;
 8006710:	e006      	b.n	8006720 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 f972 	bl	80079fe <USBD_CtlError>
          ret = USBD_FAIL;
 800671a:	2302      	movs	r3, #2
 800671c:	75fb      	strb	r3, [r7, #23]
          break;
 800671e:	bf00      	nop
      }
      break;
 8006720:	e08f      	b.n	8006842 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	785b      	ldrb	r3, [r3, #1]
 8006726:	2b0b      	cmp	r3, #11
 8006728:	d87c      	bhi.n	8006824 <USBD_CUSTOM_HID_Setup+0x1d4>
 800672a:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <USBD_CUSTOM_HID_Setup+0xe0>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006761 	.word	0x08006761
 8006734:	08006825 	.word	0x08006825
 8006738:	08006825 	.word	0x08006825
 800673c:	08006825 	.word	0x08006825
 8006740:	08006825 	.word	0x08006825
 8006744:	08006825 	.word	0x08006825
 8006748:	08006789 	.word	0x08006789
 800674c:	08006825 	.word	0x08006825
 8006750:	08006825 	.word	0x08006825
 8006754:	08006825 	.word	0x08006825
 8006758:	080067d7 	.word	0x080067d7
 800675c:	080067ff 	.word	0x080067ff
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006766:	2b03      	cmp	r3, #3
 8006768:	d107      	bne.n	800677a <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800676a:	f107 030e 	add.w	r3, r7, #14
 800676e:	2202      	movs	r2, #2
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f001 f9ae 	bl	8007ad4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006778:	e05b      	b.n	8006832 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 f93e 	bl	80079fe <USBD_CtlError>
            ret = USBD_FAIL;
 8006782:	2302      	movs	r3, #2
 8006784:	75fb      	strb	r3, [r7, #23]
          break;
 8006786:	e054      	b.n	8006832 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	885b      	ldrh	r3, [r3, #2]
 800678c:	0a1b      	lsrs	r3, r3, #8
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b22      	cmp	r3, #34	; 0x22
 8006792:	d10b      	bne.n	80067ac <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	88db      	ldrh	r3, [r3, #6]
 8006798:	2b32      	cmp	r3, #50	; 0x32
 800679a:	bf28      	it	cs
 800679c:	2332      	movcs	r3, #50	; 0x32
 800679e:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	e00d      	b.n	80067c8 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	885b      	ldrh	r3, [r3, #2]
 80067b0:	0a1b      	lsrs	r3, r3, #8
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	2b21      	cmp	r3, #33	; 0x21
 80067b6:	d107      	bne.n	80067c8 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80067b8:	4b24      	ldr	r3, [pc, #144]	; (800684c <USBD_CUSTOM_HID_Setup+0x1fc>)
 80067ba:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	88db      	ldrh	r3, [r3, #6]
 80067c0:	2b09      	cmp	r3, #9
 80067c2:	bf28      	it	cs
 80067c4:	2309      	movcs	r3, #9
 80067c6:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80067c8:	8bfb      	ldrh	r3, [r7, #30]
 80067ca:	461a      	mov	r2, r3
 80067cc:	69b9      	ldr	r1, [r7, #24]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 f980 	bl	8007ad4 <USBD_CtlSendData>
          break;
 80067d4:	e02d      	b.n	8006832 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d107      	bne.n	80067f0 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	330c      	adds	r3, #12
 80067e4:	2201      	movs	r2, #1
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 f973 	bl	8007ad4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067ee:	e020      	b.n	8006832 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 f903 	bl	80079fe <USBD_CtlError>
            ret = USBD_FAIL;
 80067f8:	2302      	movs	r3, #2
 80067fa:	75fb      	strb	r3, [r7, #23]
          break;
 80067fc:	e019      	b.n	8006832 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006804:	2b03      	cmp	r3, #3
 8006806:	d106      	bne.n	8006816 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	885b      	ldrh	r3, [r3, #2]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006814:	e00d      	b.n	8006832 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 f8f0 	bl	80079fe <USBD_CtlError>
            ret = USBD_FAIL;
 800681e:	2302      	movs	r3, #2
 8006820:	75fb      	strb	r3, [r7, #23]
          break;
 8006822:	e006      	b.n	8006832 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 f8e9 	bl	80079fe <USBD_CtlError>
          ret = USBD_FAIL;
 800682c:	2302      	movs	r3, #2
 800682e:	75fb      	strb	r3, [r7, #23]
          break;
 8006830:	bf00      	nop
      }
      break;
 8006832:	e006      	b.n	8006842 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f001 f8e1 	bl	80079fe <USBD_CtlError>
      ret = USBD_FAIL;
 800683c:	2302      	movs	r3, #2
 800683e:	75fb      	strb	r3, [r7, #23]
      break;
 8006840:	bf00      	nop
  }
  return ret;
 8006842:	7dfb      	ldrb	r3, [r7, #23]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3720      	adds	r7, #32
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	200000c8 	.word	0x200000c8

08006850 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	4613      	mov	r3, r2
 800685c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006864:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686c:	2b03      	cmp	r3, #3
 800686e:	d10f      	bne.n	8006890 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	7d1b      	ldrb	r3, [r3, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d109      	bne.n	800688c <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2201      	movs	r2, #1
 800687c:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800687e:	88fb      	ldrh	r3, [r7, #6]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	2181      	movs	r1, #129	; 0x81
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f001 fe63 	bl	8008550 <USBD_LL_Transmit>
 800688a:	e001      	b.n	8006890 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2229      	movs	r2, #41	; 0x29
 80068a8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80068aa:	4b03      	ldr	r3, [pc, #12]	; (80068b8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	20000044 	.word	0x20000044

080068bc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2229      	movs	r2, #41	; 0x29
 80068c8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80068ca:	4b03      	ldr	r3, [pc, #12]	; (80068d8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	20000070 	.word	0x20000070

080068dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2229      	movs	r2, #41	; 0x29
 80068e8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80068ea:	4b03      	ldr	r3, [pc, #12]	; (80068f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	2000009c 	.word	0x2000009c

080068fc <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800690e:	2200      	movs	r2, #0
 8006910:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006932:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	7810      	ldrb	r0, [r2, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	7852      	ldrb	r2, [r2, #1]
 8006944:	4611      	mov	r1, r2
 8006946:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	2302      	movs	r3, #2
 800694c:	2101      	movs	r1, #1
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f001 fe38 	bl	80085c4 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696c:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d10c      	bne.n	8006990 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	7810      	ldrb	r0, [r2, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	7852      	ldrb	r2, [r2, #1]
 8006986:	4611      	mov	r1, r2
 8006988:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	220a      	movs	r2, #10
 80069a8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80069aa:	4b03      	ldr	r3, [pc, #12]	; (80069b8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	200000d4 	.word	0x200000d4

080069bc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80069c6:	2302      	movs	r3, #2
 80069c8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	4613      	mov	r3, r2
 80069f6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80069fe:	2302      	movs	r3, #2
 8006a00:	e01a      	b.n	8006a38 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	79fa      	ldrb	r2, [r7, #7]
 8006a2e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f001 fbcd 	bl	80081d0 <USBD_LL_Init>

  return USBD_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d006      	beq.n	8006a62 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73fb      	strb	r3, [r7, #15]
 8006a60:	e001      	b.n	8006a66 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006a62:	2302      	movs	r3, #2
 8006a64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 fbf3 	bl	8008268 <USBD_LL_Start>

  return USBD_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00c      	beq.n	8006ad6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	78fa      	ldrb	r2, [r7, #3]
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	4798      	blx	r3
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	78fa      	ldrb	r2, [r7, #3]
 8006af6:	4611      	mov	r1, r2
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4798      	blx	r3

  return USBD_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 ff33 	bl	8007984 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b3a:	f003 031f 	and.w	r3, r3, #31
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d00c      	beq.n	8006b5c <USBD_LL_SetupStage+0x56>
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d302      	bcc.n	8006b4c <USBD_LL_SetupStage+0x46>
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d010      	beq.n	8006b6c <USBD_LL_SetupStage+0x66>
 8006b4a:	e017      	b.n	8006b7c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fa09 	bl	8006f6c <USBD_StdDevReq>
      break;
 8006b5a:	e01a      	b.n	8006b92 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa6b 	bl	8007040 <USBD_StdItfReq>
      break;
 8006b6a:	e012      	b.n	8006b92 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 faa9 	bl	80070cc <USBD_StdEPReq>
      break;
 8006b7a:	e00a      	b.n	8006b92 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 fc12 	bl	80083b4 <USBD_LL_StallEP>
      break;
 8006b90:	bf00      	nop
  }

  return USBD_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006baa:	7afb      	ldrb	r3, [r7, #11]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d14b      	bne.n	8006c48 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bb6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d134      	bne.n	8006c2c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d919      	bls.n	8006c02 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	1ad2      	subs	r2, r2, r3
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d203      	bcs.n	8006bf0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	e002      	b.n	8006bf6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6879      	ldr	r1, [r7, #4]
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 ffb6 	bl	8007b6c <USBD_CtlContinueRx>
 8006c00:	e038      	b.n	8006c74 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00a      	beq.n	8006c24 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d105      	bne.n	8006c24 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 ffb3 	bl	8007b90 <USBD_CtlSendStatus>
 8006c2a:	e023      	b.n	8006c74 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	d11e      	bne.n	8006c74 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006c3e:	2100      	movs	r1, #0
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f001 fbb7 	bl	80083b4 <USBD_LL_StallEP>
 8006c46:	e015      	b.n	8006c74 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00d      	beq.n	8006c70 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d108      	bne.n	8006c70 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	7afa      	ldrb	r2, [r7, #11]
 8006c68:	4611      	mov	r1, r2
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	4798      	blx	r3
 8006c6e:	e001      	b.n	8006c74 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c70:	2302      	movs	r3, #2
 8006c72:	e000      	b.n	8006c76 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b086      	sub	sp, #24
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	460b      	mov	r3, r1
 8006c88:	607a      	str	r2, [r7, #4]
 8006c8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c8c:	7afb      	ldrb	r3, [r7, #11]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d17f      	bne.n	8006d92 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3314      	adds	r3, #20
 8006c96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d15c      	bne.n	8006d5c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d915      	bls.n	8006cda <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	1ad2      	subs	r2, r2, r3
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 ff20 	bl	8007b0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ccc:	2300      	movs	r3, #0
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f001 fc76 	bl	80085c4 <USBD_LL_PrepareReceive>
 8006cd8:	e04e      	b.n	8006d78 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	6912      	ldr	r2, [r2, #16]
 8006ce2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ce6:	fb02 f201 	mul.w	r2, r2, r1
 8006cea:	1a9b      	subs	r3, r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d11c      	bne.n	8006d2a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d316      	bcc.n	8006d2a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d20f      	bcs.n	8006d2a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 fefc 	bl	8007b0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2100      	movs	r1, #0
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f001 fc4e 	bl	80085c4 <USBD_LL_PrepareReceive>
 8006d28:	e026      	b.n	8006d78 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d105      	bne.n	8006d4c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006d4c:	2180      	movs	r1, #128	; 0x80
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f001 fb30 	bl	80083b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 ff2e 	bl	8007bb6 <USBD_CtlReceiveStatus>
 8006d5a:	e00d      	b.n	8006d78 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d004      	beq.n	8006d70 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d70:	2180      	movs	r1, #128	; 0x80
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f001 fb1e 	bl	80083b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d11d      	bne.n	8006dbe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7ff fe82 	bl	8006a8c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d90:	e015      	b.n	8006dbe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00d      	beq.n	8006dba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d108      	bne.n	8006dba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	7afa      	ldrb	r2, [r7, #11]
 8006db2:	4611      	mov	r1, r2
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	4798      	blx	r3
 8006db8:	e001      	b.n	8006dbe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e000      	b.n	8006dc0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dd0:	2340      	movs	r3, #64	; 0x40
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 fa78 	bl	80082cc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2240      	movs	r2, #64	; 0x40
 8006de8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dec:	2340      	movs	r3, #64	; 0x40
 8006dee:	2200      	movs	r2, #0
 8006df0:	2180      	movs	r1, #128	; 0x80
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fa6a 	bl	80082cc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2240      	movs	r2, #64	; 0x40
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d009      	beq.n	8006e40 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6852      	ldr	r2, [r2, #4]
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
  }

  return USBD_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	460b      	mov	r3, r1
 8006e54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	78fa      	ldrb	r2, [r7, #3]
 8006e5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2204      	movs	r2, #4
 8006e82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d105      	bne.n	8006eb2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d10b      	bne.n	8006eea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d005      	beq.n	8006eea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6852      	ldr	r2, [r2, #4]
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3

  return USBD_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d004      	beq.n	8006f90 <USBD_StdDevReq+0x24>
 8006f86:	2b40      	cmp	r3, #64	; 0x40
 8006f88:	d002      	beq.n	8006f90 <USBD_StdDevReq+0x24>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d008      	beq.n	8006fa0 <USBD_StdDevReq+0x34>
 8006f8e:	e04c      	b.n	800702a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
      break;
 8006f9e:	e049      	b.n	8007034 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b09      	cmp	r3, #9
 8006fa6:	d83a      	bhi.n	800701e <USBD_StdDevReq+0xb2>
 8006fa8:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <USBD_StdDevReq+0x44>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08007001 	.word	0x08007001
 8006fb4:	08007015 	.word	0x08007015
 8006fb8:	0800701f 	.word	0x0800701f
 8006fbc:	0800700b 	.word	0x0800700b
 8006fc0:	0800701f 	.word	0x0800701f
 8006fc4:	08006fe3 	.word	0x08006fe3
 8006fc8:	08006fd9 	.word	0x08006fd9
 8006fcc:	0800701f 	.word	0x0800701f
 8006fd0:	08006ff7 	.word	0x08006ff7
 8006fd4:	08006fed 	.word	0x08006fed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f9d4 	bl	8007388 <USBD_GetDescriptor>
          break;
 8006fe0:	e022      	b.n	8007028 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fb61 	bl	80076ac <USBD_SetAddress>
          break;
 8006fea:	e01d      	b.n	8007028 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fb9e 	bl	8007730 <USBD_SetConfig>
          break;
 8006ff4:	e018      	b.n	8007028 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fc27 	bl	800784c <USBD_GetConfig>
          break;
 8006ffe:	e013      	b.n	8007028 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fc56 	bl	80078b4 <USBD_GetStatus>
          break;
 8007008:	e00e      	b.n	8007028 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fc84 	bl	800791a <USBD_SetFeature>
          break;
 8007012:	e009      	b.n	8007028 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fc93 	bl	8007942 <USBD_ClrFeature>
          break;
 800701c:	e004      	b.n	8007028 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fcec 	bl	80079fe <USBD_CtlError>
          break;
 8007026:	bf00      	nop
      }
      break;
 8007028:	e004      	b.n	8007034 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fce6 	bl	80079fe <USBD_CtlError>
      break;
 8007032:	bf00      	nop
  }

  return ret;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop

08007040 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007056:	2b20      	cmp	r3, #32
 8007058:	d003      	beq.n	8007062 <USBD_StdItfReq+0x22>
 800705a:	2b40      	cmp	r3, #64	; 0x40
 800705c:	d001      	beq.n	8007062 <USBD_StdItfReq+0x22>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d12a      	bne.n	80070b8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007068:	3b01      	subs	r3, #1
 800706a:	2b02      	cmp	r3, #2
 800706c:	d81d      	bhi.n	80070aa <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	889b      	ldrh	r3, [r3, #4]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b01      	cmp	r3, #1
 8007076:	d813      	bhi.n	80070a0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	4798      	blx	r3
 8007086:	4603      	mov	r3, r0
 8007088:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	88db      	ldrh	r3, [r3, #6]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d110      	bne.n	80070b4 <USBD_StdItfReq+0x74>
 8007092:	7bfb      	ldrb	r3, [r7, #15]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10d      	bne.n	80070b4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fd79 	bl	8007b90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800709e:	e009      	b.n	80070b4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fcab 	bl	80079fe <USBD_CtlError>
          break;
 80070a8:	e004      	b.n	80070b4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fca6 	bl	80079fe <USBD_CtlError>
          break;
 80070b2:	e000      	b.n	80070b6 <USBD_StdItfReq+0x76>
          break;
 80070b4:	bf00      	nop
      }
      break;
 80070b6:	e004      	b.n	80070c2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fc9f 	bl	80079fe <USBD_CtlError>
      break;
 80070c0:	bf00      	nop
  }

  return USBD_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	889b      	ldrh	r3, [r3, #4]
 80070de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070e8:	2b20      	cmp	r3, #32
 80070ea:	d004      	beq.n	80070f6 <USBD_StdEPReq+0x2a>
 80070ec:	2b40      	cmp	r3, #64	; 0x40
 80070ee:	d002      	beq.n	80070f6 <USBD_StdEPReq+0x2a>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d008      	beq.n	8007106 <USBD_StdEPReq+0x3a>
 80070f4:	e13d      	b.n	8007372 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	4798      	blx	r3
      break;
 8007104:	e13a      	b.n	800737c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800710e:	2b20      	cmp	r3, #32
 8007110:	d10a      	bne.n	8007128 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	4798      	blx	r3
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	e12a      	b.n	800737e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	785b      	ldrb	r3, [r3, #1]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d03e      	beq.n	80071ae <USBD_StdEPReq+0xe2>
 8007130:	2b03      	cmp	r3, #3
 8007132:	d002      	beq.n	800713a <USBD_StdEPReq+0x6e>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d070      	beq.n	800721a <USBD_StdEPReq+0x14e>
 8007138:	e115      	b.n	8007366 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007140:	2b02      	cmp	r3, #2
 8007142:	d002      	beq.n	800714a <USBD_StdEPReq+0x7e>
 8007144:	2b03      	cmp	r3, #3
 8007146:	d015      	beq.n	8007174 <USBD_StdEPReq+0xa8>
 8007148:	e02b      	b.n	80071a2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00c      	beq.n	800716a <USBD_StdEPReq+0x9e>
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	2b80      	cmp	r3, #128	; 0x80
 8007154:	d009      	beq.n	800716a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 f92a 	bl	80083b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007160:	2180      	movs	r1, #128	; 0x80
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 f926 	bl	80083b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007168:	e020      	b.n	80071ac <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fc46 	bl	80079fe <USBD_CtlError>
              break;
 8007172:	e01b      	b.n	80071ac <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	885b      	ldrh	r3, [r3, #2]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10e      	bne.n	800719a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00b      	beq.n	800719a <USBD_StdEPReq+0xce>
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	2b80      	cmp	r3, #128	; 0x80
 8007186:	d008      	beq.n	800719a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	88db      	ldrh	r3, [r3, #6]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d104      	bne.n	800719a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 f90d 	bl	80083b4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fcf8 	bl	8007b90 <USBD_CtlSendStatus>

              break;
 80071a0:	e004      	b.n	80071ac <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fc2a 	bl	80079fe <USBD_CtlError>
              break;
 80071aa:	bf00      	nop
          }
          break;
 80071ac:	e0e0      	b.n	8007370 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d002      	beq.n	80071be <USBD_StdEPReq+0xf2>
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d015      	beq.n	80071e8 <USBD_StdEPReq+0x11c>
 80071bc:	e026      	b.n	800720c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00c      	beq.n	80071de <USBD_StdEPReq+0x112>
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
 80071c6:	2b80      	cmp	r3, #128	; 0x80
 80071c8:	d009      	beq.n	80071de <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80071ca:	7bbb      	ldrb	r3, [r7, #14]
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f001 f8f0 	bl	80083b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80071d4:	2180      	movs	r1, #128	; 0x80
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 f8ec 	bl	80083b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071dc:	e01c      	b.n	8007218 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fc0c 	bl	80079fe <USBD_CtlError>
              break;
 80071e6:	e017      	b.n	8007218 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	885b      	ldrh	r3, [r3, #2]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d112      	bne.n	8007216 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d004      	beq.n	8007204 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 f90e 	bl	8008420 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fcc3 	bl	8007b90 <USBD_CtlSendStatus>
              }
              break;
 800720a:	e004      	b.n	8007216 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fbf5 	bl	80079fe <USBD_CtlError>
              break;
 8007214:	e000      	b.n	8007218 <USBD_StdEPReq+0x14c>
              break;
 8007216:	bf00      	nop
          }
          break;
 8007218:	e0aa      	b.n	8007370 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007220:	2b02      	cmp	r3, #2
 8007222:	d002      	beq.n	800722a <USBD_StdEPReq+0x15e>
 8007224:	2b03      	cmp	r3, #3
 8007226:	d032      	beq.n	800728e <USBD_StdEPReq+0x1c2>
 8007228:	e097      	b.n	800735a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d007      	beq.n	8007240 <USBD_StdEPReq+0x174>
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2b80      	cmp	r3, #128	; 0x80
 8007234:	d004      	beq.n	8007240 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fbe0 	bl	80079fe <USBD_CtlError>
                break;
 800723e:	e091      	b.n	8007364 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007244:	2b00      	cmp	r3, #0
 8007246:	da0b      	bge.n	8007260 <USBD_StdEPReq+0x194>
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	3310      	adds	r3, #16
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	4413      	add	r3, r2
 800725c:	3304      	adds	r3, #4
 800725e:	e00b      	b.n	8007278 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4413      	add	r3, r2
 8007276:	3304      	adds	r3, #4
 8007278:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2200      	movs	r2, #0
 800727e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2202      	movs	r2, #2
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fc24 	bl	8007ad4 <USBD_CtlSendData>
              break;
 800728c:	e06a      	b.n	8007364 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800728e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007292:	2b00      	cmp	r3, #0
 8007294:	da11      	bge.n	80072ba <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	f003 020f 	and.w	r2, r3, #15
 800729c:	6879      	ldr	r1, [r7, #4]
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	440b      	add	r3, r1
 80072a8:	3318      	adds	r3, #24
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d117      	bne.n	80072e0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fba3 	bl	80079fe <USBD_CtlError>
                  break;
 80072b8:	e054      	b.n	8007364 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	f003 020f 	and.w	r2, r3, #15
 80072c0:	6879      	ldr	r1, [r7, #4]
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	440b      	add	r3, r1
 80072cc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d104      	bne.n	80072e0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fb90 	bl	80079fe <USBD_CtlError>
                  break;
 80072de:	e041      	b.n	8007364 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	da0b      	bge.n	8007300 <USBD_StdEPReq+0x234>
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	3310      	adds	r3, #16
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	4413      	add	r3, r2
 80072fc:	3304      	adds	r3, #4
 80072fe:	e00b      	b.n	8007318 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	4413      	add	r3, r2
 8007316:	3304      	adds	r3, #4
 8007318:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <USBD_StdEPReq+0x25a>
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	2b80      	cmp	r3, #128	; 0x80
 8007324:	d103      	bne.n	800732e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	e00e      	b.n	800734c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 f8aa 	bl	800848c <USBD_LL_IsStallEP>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2201      	movs	r2, #1
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	e002      	b.n	800734c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2202      	movs	r2, #2
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fbbe 	bl	8007ad4 <USBD_CtlSendData>
              break;
 8007358:	e004      	b.n	8007364 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fb4e 	bl	80079fe <USBD_CtlError>
              break;
 8007362:	bf00      	nop
          }
          break;
 8007364:	e004      	b.n	8007370 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fb48 	bl	80079fe <USBD_CtlError>
          break;
 800736e:	bf00      	nop
      }
      break;
 8007370:	e004      	b.n	800737c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fb42 	bl	80079fe <USBD_CtlError>
      break;
 800737a:	bf00      	nop
  }

  return ret;
 800737c:	7bfb      	ldrb	r3, [r7, #15]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	885b      	ldrh	r3, [r3, #2]
 80073a2:	0a1b      	lsrs	r3, r3, #8
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	2b0e      	cmp	r3, #14
 80073aa:	f200 8152 	bhi.w	8007652 <USBD_GetDescriptor+0x2ca>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <USBD_GetDescriptor+0x2c>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	08007425 	.word	0x08007425
 80073b8:	0800743d 	.word	0x0800743d
 80073bc:	0800747d 	.word	0x0800747d
 80073c0:	08007653 	.word	0x08007653
 80073c4:	08007653 	.word	0x08007653
 80073c8:	080075f3 	.word	0x080075f3
 80073cc:	0800761f 	.word	0x0800761f
 80073d0:	08007653 	.word	0x08007653
 80073d4:	08007653 	.word	0x08007653
 80073d8:	08007653 	.word	0x08007653
 80073dc:	08007653 	.word	0x08007653
 80073e0:	08007653 	.word	0x08007653
 80073e4:	08007653 	.word	0x08007653
 80073e8:	08007653 	.word	0x08007653
 80073ec:	080073f1 	.word	0x080073f1
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00b      	beq.n	8007414 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	7c12      	ldrb	r2, [r2, #16]
 8007408:	f107 0108 	add.w	r1, r7, #8
 800740c:	4610      	mov	r0, r2
 800740e:	4798      	blx	r3
 8007410:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007412:	e126      	b.n	8007662 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 faf1 	bl	80079fe <USBD_CtlError>
        err++;
 800741c:	7afb      	ldrb	r3, [r7, #11]
 800741e:	3301      	adds	r3, #1
 8007420:	72fb      	strb	r3, [r7, #11]
      break;
 8007422:	e11e      	b.n	8007662 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	7c12      	ldrb	r2, [r2, #16]
 8007430:	f107 0108 	add.w	r1, r7, #8
 8007434:	4610      	mov	r0, r2
 8007436:	4798      	blx	r3
 8007438:	60f8      	str	r0, [r7, #12]
      break;
 800743a:	e112      	b.n	8007662 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	7c1b      	ldrb	r3, [r3, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10d      	bne.n	8007460 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800744a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744c:	f107 0208 	add.w	r2, r7, #8
 8007450:	4610      	mov	r0, r2
 8007452:	4798      	blx	r3
 8007454:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3301      	adds	r3, #1
 800745a:	2202      	movs	r2, #2
 800745c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800745e:	e100      	b.n	8007662 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	f107 0208 	add.w	r2, r7, #8
 800746c:	4610      	mov	r0, r2
 800746e:	4798      	blx	r3
 8007470:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3301      	adds	r3, #1
 8007476:	2202      	movs	r2, #2
 8007478:	701a      	strb	r2, [r3, #0]
      break;
 800747a:	e0f2      	b.n	8007662 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	885b      	ldrh	r3, [r3, #2]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b05      	cmp	r3, #5
 8007484:	f200 80ac 	bhi.w	80075e0 <USBD_GetDescriptor+0x258>
 8007488:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <USBD_GetDescriptor+0x108>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074a9 	.word	0x080074a9
 8007494:	080074dd 	.word	0x080074dd
 8007498:	08007511 	.word	0x08007511
 800749c:	08007545 	.word	0x08007545
 80074a0:	08007579 	.word	0x08007579
 80074a4:	080075ad 	.word	0x080075ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	7c12      	ldrb	r2, [r2, #16]
 80074c0:	f107 0108 	add.w	r1, r7, #8
 80074c4:	4610      	mov	r0, r2
 80074c6:	4798      	blx	r3
 80074c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ca:	e091      	b.n	80075f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fa95 	bl	80079fe <USBD_CtlError>
            err++;
 80074d4:	7afb      	ldrb	r3, [r7, #11]
 80074d6:	3301      	adds	r3, #1
 80074d8:	72fb      	strb	r3, [r7, #11]
          break;
 80074da:	e089      	b.n	80075f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00b      	beq.n	8007500 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	7c12      	ldrb	r2, [r2, #16]
 80074f4:	f107 0108 	add.w	r1, r7, #8
 80074f8:	4610      	mov	r0, r2
 80074fa:	4798      	blx	r3
 80074fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074fe:	e077      	b.n	80075f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa7b 	bl	80079fe <USBD_CtlError>
            err++;
 8007508:	7afb      	ldrb	r3, [r7, #11]
 800750a:	3301      	adds	r3, #1
 800750c:	72fb      	strb	r3, [r7, #11]
          break;
 800750e:	e06f      	b.n	80075f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00b      	beq.n	8007534 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	7c12      	ldrb	r2, [r2, #16]
 8007528:	f107 0108 	add.w	r1, r7, #8
 800752c:	4610      	mov	r0, r2
 800752e:	4798      	blx	r3
 8007530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007532:	e05d      	b.n	80075f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fa61 	bl	80079fe <USBD_CtlError>
            err++;
 800753c:	7afb      	ldrb	r3, [r7, #11]
 800753e:	3301      	adds	r3, #1
 8007540:	72fb      	strb	r3, [r7, #11]
          break;
 8007542:	e055      	b.n	80075f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00b      	beq.n	8007568 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	7c12      	ldrb	r2, [r2, #16]
 800755c:	f107 0108 	add.w	r1, r7, #8
 8007560:	4610      	mov	r0, r2
 8007562:	4798      	blx	r3
 8007564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007566:	e043      	b.n	80075f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa47 	bl	80079fe <USBD_CtlError>
            err++;
 8007570:	7afb      	ldrb	r3, [r7, #11]
 8007572:	3301      	adds	r3, #1
 8007574:	72fb      	strb	r3, [r7, #11]
          break;
 8007576:	e03b      	b.n	80075f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00b      	beq.n	800759c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	7c12      	ldrb	r2, [r2, #16]
 8007590:	f107 0108 	add.w	r1, r7, #8
 8007594:	4610      	mov	r0, r2
 8007596:	4798      	blx	r3
 8007598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800759a:	e029      	b.n	80075f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa2d 	bl	80079fe <USBD_CtlError>
            err++;
 80075a4:	7afb      	ldrb	r3, [r7, #11]
 80075a6:	3301      	adds	r3, #1
 80075a8:	72fb      	strb	r3, [r7, #11]
          break;
 80075aa:	e021      	b.n	80075f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00b      	beq.n	80075d0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	7c12      	ldrb	r2, [r2, #16]
 80075c4:	f107 0108 	add.w	r1, r7, #8
 80075c8:	4610      	mov	r0, r2
 80075ca:	4798      	blx	r3
 80075cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ce:	e00f      	b.n	80075f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fa13 	bl	80079fe <USBD_CtlError>
            err++;
 80075d8:	7afb      	ldrb	r3, [r7, #11]
 80075da:	3301      	adds	r3, #1
 80075dc:	72fb      	strb	r3, [r7, #11]
          break;
 80075de:	e007      	b.n	80075f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fa0b 	bl	80079fe <USBD_CtlError>
          err++;
 80075e8:	7afb      	ldrb	r3, [r7, #11]
 80075ea:	3301      	adds	r3, #1
 80075ec:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80075ee:	e038      	b.n	8007662 <USBD_GetDescriptor+0x2da>
 80075f0:	e037      	b.n	8007662 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7c1b      	ldrb	r3, [r3, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d109      	bne.n	800760e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007602:	f107 0208 	add.w	r2, r7, #8
 8007606:	4610      	mov	r0, r2
 8007608:	4798      	blx	r3
 800760a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800760c:	e029      	b.n	8007662 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f9f4 	bl	80079fe <USBD_CtlError>
        err++;
 8007616:	7afb      	ldrb	r3, [r7, #11]
 8007618:	3301      	adds	r3, #1
 800761a:	72fb      	strb	r3, [r7, #11]
      break;
 800761c:	e021      	b.n	8007662 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7c1b      	ldrb	r3, [r3, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10d      	bne.n	8007642 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	f107 0208 	add.w	r2, r7, #8
 8007632:	4610      	mov	r0, r2
 8007634:	4798      	blx	r3
 8007636:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3301      	adds	r3, #1
 800763c:	2207      	movs	r2, #7
 800763e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007640:	e00f      	b.n	8007662 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f9da 	bl	80079fe <USBD_CtlError>
        err++;
 800764a:	7afb      	ldrb	r3, [r7, #11]
 800764c:	3301      	adds	r3, #1
 800764e:	72fb      	strb	r3, [r7, #11]
      break;
 8007650:	e007      	b.n	8007662 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f9d2 	bl	80079fe <USBD_CtlError>
      err++;
 800765a:	7afb      	ldrb	r3, [r7, #11]
 800765c:	3301      	adds	r3, #1
 800765e:	72fb      	strb	r3, [r7, #11]
      break;
 8007660:	bf00      	nop
  }

  if (err != 0U)
 8007662:	7afb      	ldrb	r3, [r7, #11]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d11c      	bne.n	80076a2 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007668:	893b      	ldrh	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d011      	beq.n	8007692 <USBD_GetDescriptor+0x30a>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	88db      	ldrh	r3, [r3, #6]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00d      	beq.n	8007692 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	88da      	ldrh	r2, [r3, #6]
 800767a:	893b      	ldrh	r3, [r7, #8]
 800767c:	4293      	cmp	r3, r2
 800767e:	bf28      	it	cs
 8007680:	4613      	movcs	r3, r2
 8007682:	b29b      	uxth	r3, r3
 8007684:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007686:	893b      	ldrh	r3, [r7, #8]
 8007688:	461a      	mov	r2, r3
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fa21 	bl	8007ad4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	88db      	ldrh	r3, [r3, #6]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fa78 	bl	8007b90 <USBD_CtlSendStatus>
 80076a0:	e000      	b.n	80076a4 <USBD_GetDescriptor+0x31c>
    return;
 80076a2:	bf00      	nop
    }
  }
}
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop

080076ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	889b      	ldrh	r3, [r3, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d130      	bne.n	8007720 <USBD_SetAddress+0x74>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	88db      	ldrh	r3, [r3, #6]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d12c      	bne.n	8007720 <USBD_SetAddress+0x74>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	885b      	ldrh	r3, [r3, #2]
 80076ca:	2b7f      	cmp	r3, #127	; 0x7f
 80076cc:	d828      	bhi.n	8007720 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	885b      	ldrh	r3, [r3, #2]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d104      	bne.n	80076ee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f989 	bl	80079fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ec:	e01c      	b.n	8007728 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	7bfa      	ldrb	r2, [r7, #15]
 80076f2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fef2 	bl	80084e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fa45 	bl	8007b90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007714:	e008      	b.n	8007728 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771e:	e003      	b.n	8007728 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f96b 	bl	80079fe <USBD_CtlError>
  }
}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	885b      	ldrh	r3, [r3, #2]
 800773e:	b2da      	uxtb	r2, r3
 8007740:	4b41      	ldr	r3, [pc, #260]	; (8007848 <USBD_SetConfig+0x118>)
 8007742:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007744:	4b40      	ldr	r3, [pc, #256]	; (8007848 <USBD_SetConfig+0x118>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d904      	bls.n	8007756 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f955 	bl	80079fe <USBD_CtlError>
 8007754:	e075      	b.n	8007842 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800775c:	2b02      	cmp	r3, #2
 800775e:	d002      	beq.n	8007766 <USBD_SetConfig+0x36>
 8007760:	2b03      	cmp	r3, #3
 8007762:	d023      	beq.n	80077ac <USBD_SetConfig+0x7c>
 8007764:	e062      	b.n	800782c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007766:	4b38      	ldr	r3, [pc, #224]	; (8007848 <USBD_SetConfig+0x118>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d01a      	beq.n	80077a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800776e:	4b36      	ldr	r3, [pc, #216]	; (8007848 <USBD_SetConfig+0x118>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2203      	movs	r2, #3
 800777c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007780:	4b31      	ldr	r3, [pc, #196]	; (8007848 <USBD_SetConfig+0x118>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7ff f98b 	bl	8006aa2 <USBD_SetClassConfig>
 800778c:	4603      	mov	r3, r0
 800778e:	2b02      	cmp	r3, #2
 8007790:	d104      	bne.n	800779c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f932 	bl	80079fe <USBD_CtlError>
            return;
 800779a:	e052      	b.n	8007842 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f9f7 	bl	8007b90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80077a2:	e04e      	b.n	8007842 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f9f3 	bl	8007b90 <USBD_CtlSendStatus>
        break;
 80077aa:	e04a      	b.n	8007842 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80077ac:	4b26      	ldr	r3, [pc, #152]	; (8007848 <USBD_SetConfig+0x118>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d112      	bne.n	80077da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80077bc:	4b22      	ldr	r3, [pc, #136]	; (8007848 <USBD_SetConfig+0x118>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80077c6:	4b20      	ldr	r3, [pc, #128]	; (8007848 <USBD_SetConfig+0x118>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7ff f987 	bl	8006ae0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f9dc 	bl	8007b90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80077d8:	e033      	b.n	8007842 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80077da:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <USBD_SetConfig+0x118>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d01d      	beq.n	8007824 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7ff f975 	bl	8006ae0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80077f6:	4b14      	ldr	r3, [pc, #80]	; (8007848 <USBD_SetConfig+0x118>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007800:	4b11      	ldr	r3, [pc, #68]	; (8007848 <USBD_SetConfig+0x118>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	4619      	mov	r1, r3
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7ff f94b 	bl	8006aa2 <USBD_SetClassConfig>
 800780c:	4603      	mov	r3, r0
 800780e:	2b02      	cmp	r3, #2
 8007810:	d104      	bne.n	800781c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f8f2 	bl	80079fe <USBD_CtlError>
            return;
 800781a:	e012      	b.n	8007842 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f9b7 	bl	8007b90 <USBD_CtlSendStatus>
        break;
 8007822:	e00e      	b.n	8007842 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f9b3 	bl	8007b90 <USBD_CtlSendStatus>
        break;
 800782a:	e00a      	b.n	8007842 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f8e5 	bl	80079fe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007834:	4b04      	ldr	r3, [pc, #16]	; (8007848 <USBD_SetConfig+0x118>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff f950 	bl	8006ae0 <USBD_ClrClassConfig>
        break;
 8007840:	bf00      	nop
    }
  }
}
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	200001c8 	.word	0x200001c8

0800784c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	88db      	ldrh	r3, [r3, #6]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d004      	beq.n	8007868 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f8cc 	bl	80079fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007866:	e021      	b.n	80078ac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786e:	2b01      	cmp	r3, #1
 8007870:	db17      	blt.n	80078a2 <USBD_GetConfig+0x56>
 8007872:	2b02      	cmp	r3, #2
 8007874:	dd02      	ble.n	800787c <USBD_GetConfig+0x30>
 8007876:	2b03      	cmp	r3, #3
 8007878:	d00b      	beq.n	8007892 <USBD_GetConfig+0x46>
 800787a:	e012      	b.n	80078a2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3308      	adds	r3, #8
 8007886:	2201      	movs	r2, #1
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f922 	bl	8007ad4 <USBD_CtlSendData>
        break;
 8007890:	e00c      	b.n	80078ac <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3304      	adds	r3, #4
 8007896:	2201      	movs	r2, #1
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f91a 	bl	8007ad4 <USBD_CtlSendData>
        break;
 80078a0:	e004      	b.n	80078ac <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f8aa 	bl	80079fe <USBD_CtlError>
        break;
 80078aa:	bf00      	nop
}
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c4:	3b01      	subs	r3, #1
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d81e      	bhi.n	8007908 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	88db      	ldrh	r3, [r3, #6]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d004      	beq.n	80078dc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f892 	bl	80079fe <USBD_CtlError>
        break;
 80078da:	e01a      	b.n	8007912 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d005      	beq.n	80078f8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f043 0202 	orr.w	r2, r3, #2
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	330c      	adds	r3, #12
 80078fc:	2202      	movs	r2, #2
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f8e7 	bl	8007ad4 <USBD_CtlSendData>
      break;
 8007906:	e004      	b.n	8007912 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f877 	bl	80079fe <USBD_CtlError>
      break;
 8007910:	bf00      	nop
  }
}
 8007912:	bf00      	nop
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b082      	sub	sp, #8
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	885b      	ldrh	r3, [r3, #2]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d106      	bne.n	800793a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f92b 	bl	8007b90 <USBD_CtlSendStatus>
  }
}
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007952:	3b01      	subs	r3, #1
 8007954:	2b02      	cmp	r3, #2
 8007956:	d80b      	bhi.n	8007970 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	885b      	ldrh	r3, [r3, #2]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d10c      	bne.n	800797a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f911 	bl	8007b90 <USBD_CtlSendStatus>
      }
      break;
 800796e:	e004      	b.n	800797a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f843 	bl	80079fe <USBD_CtlError>
      break;
 8007978:	e000      	b.n	800797c <USBD_ClrFeature+0x3a>
      break;
 800797a:	bf00      	nop
  }
}
 800797c:	bf00      	nop
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781a      	ldrb	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	785a      	ldrb	r2, [r3, #1]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	3302      	adds	r3, #2
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	3303      	adds	r3, #3
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	021b      	lsls	r3, r3, #8
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	4413      	add	r3, r2
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	3304      	adds	r3, #4
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	3305      	adds	r3, #5
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	021b      	lsls	r3, r3, #8
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	4413      	add	r3, r2
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	3306      	adds	r3, #6
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	b29a      	uxth	r2, r3
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	3307      	adds	r3, #7
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	4413      	add	r3, r2
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	80da      	strh	r2, [r3, #6]

}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007a08:	2180      	movs	r1, #128	; 0x80
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fcd2 	bl	80083b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a10:	2100      	movs	r1, #0
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fcce 	bl	80083b4 <USBD_LL_StallEP>
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d032      	beq.n	8007a9c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 f834 	bl	8007aa4 <USBD_GetLen>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	3301      	adds	r3, #1
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	75fa      	strb	r2, [r7, #23]
 8007a50:	461a      	mov	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	4413      	add	r3, r2
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	7812      	ldrb	r2, [r2, #0]
 8007a5a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	75fa      	strb	r2, [r7, #23]
 8007a62:	461a      	mov	r2, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	4413      	add	r3, r2
 8007a68:	2203      	movs	r2, #3
 8007a6a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007a6c:	e012      	b.n	8007a94 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	60fa      	str	r2, [r7, #12]
 8007a74:	7dfa      	ldrb	r2, [r7, #23]
 8007a76:	1c51      	adds	r1, r2, #1
 8007a78:	75f9      	strb	r1, [r7, #23]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	440a      	add	r2, r1
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	75fa      	strb	r2, [r7, #23]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4413      	add	r3, r2
 8007a90:	2200      	movs	r2, #0
 8007a92:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e8      	bne.n	8007a6e <USBD_GetString+0x4e>
    }
  }
}
 8007a9c:	bf00      	nop
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007ab0:	e005      	b.n	8007abe <USBD_GetLen+0x1a>
  {
    len++;
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3301      	adds	r3, #1
 8007abc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1f5      	bne.n	8007ab2 <USBD_GetLen+0xe>
  }

  return len;
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007aea:	88fa      	ldrh	r2, [r7, #6]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007af0:	88fa      	ldrh	r2, [r7, #6]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007af6:	88fb      	ldrh	r3, [r7, #6]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	2100      	movs	r1, #0
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 fd27 	bl	8008550 <USBD_LL_Transmit>

  return USBD_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	2100      	movs	r1, #0
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 fd15 	bl	8008550 <USBD_LL_Transmit>

  return USBD_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2203      	movs	r2, #3
 8007b42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007b46:	88fa      	ldrh	r2, [r7, #6]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007b4e:	88fa      	ldrh	r2, [r7, #6]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b56:	88fb      	ldrh	r3, [r7, #6]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 fd31 	bl	80085c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	2100      	movs	r1, #0
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 fd1f 	bl	80085c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2204      	movs	r2, #4
 8007b9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fcd2 	bl	8008550 <USBD_LL_Transmit>

  return USBD_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2205      	movs	r2, #5
 8007bc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2100      	movs	r1, #0
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fcf9 	bl	80085c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007be0:	2200      	movs	r2, #0
 8007be2:	4912      	ldr	r1, [pc, #72]	; (8007c2c <MX_USB_DEVICE_Init+0x50>)
 8007be4:	4812      	ldr	r0, [pc, #72]	; (8007c30 <MX_USB_DEVICE_Init+0x54>)
 8007be6:	f7fe ff00 	bl	80069ea <USBD_Init>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007bf0:	f7f9 f840 	bl	8000c74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007bf4:	490f      	ldr	r1, [pc, #60]	; (8007c34 <MX_USB_DEVICE_Init+0x58>)
 8007bf6:	480e      	ldr	r0, [pc, #56]	; (8007c30 <MX_USB_DEVICE_Init+0x54>)
 8007bf8:	f7fe ff22 	bl	8006a40 <USBD_RegisterClass>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c02:	f7f9 f837 	bl	8000c74 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007c06:	490c      	ldr	r1, [pc, #48]	; (8007c38 <MX_USB_DEVICE_Init+0x5c>)
 8007c08:	4809      	ldr	r0, [pc, #36]	; (8007c30 <MX_USB_DEVICE_Init+0x54>)
 8007c0a:	f7fe fed7 	bl	80069bc <USBD_CUSTOM_HID_RegisterInterface>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c14:	f7f9 f82e 	bl	8000c74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c18:	4805      	ldr	r0, [pc, #20]	; (8007c30 <MX_USB_DEVICE_Init+0x54>)
 8007c1a:	f7fe ff2b 	bl	8006a74 <USBD_Start>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c24:	f7f9 f826 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c28:	bf00      	nop
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	20000124 	.word	0x20000124
 8007c30:	20000418 	.word	0x20000418
 8007c34:	2000000c 	.word	0x2000000c
 8007c38:	20000114 	.word	0x20000114

08007c3c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007c50:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	460a      	mov	r2, r1
 8007c66:	71fb      	strb	r3, [r7, #7]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8007c6c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
	...

08007c7c <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8007c88:	887b      	ldrh	r3, [r7, #2]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6879      	ldr	r1, [r7, #4]
 8007c8e:	4804      	ldr	r0, [pc, #16]	; (8007ca0 <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 8007c90:	f7fe fdde 	bl	8006850 <USBD_CUSTOM_HID_SendReport>
 8007c94:	4603      	mov	r3, r0
 8007c96:	b25b      	sxtb	r3, r3
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000418 	.word	0x20000418

08007ca4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	4603      	mov	r3, r0
 8007cac:	6039      	str	r1, [r7, #0]
 8007cae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2212      	movs	r2, #18
 8007cb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007cb6:	4b03      	ldr	r3, [pc, #12]	; (8007cc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	20000144 	.word	0x20000144

08007cc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	6039      	str	r1, [r7, #0]
 8007cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2204      	movs	r2, #4
 8007cd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007cda:	4b03      	ldr	r3, [pc, #12]	; (8007ce8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	20000164 	.word	0x20000164

08007cec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	6039      	str	r1, [r7, #0]
 8007cf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d105      	bne.n	8007d0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	4907      	ldr	r1, [pc, #28]	; (8007d20 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d02:	4808      	ldr	r0, [pc, #32]	; (8007d24 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d04:	f7ff fe8c 	bl	8007a20 <USBD_GetString>
 8007d08:	e004      	b.n	8007d14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	4904      	ldr	r1, [pc, #16]	; (8007d20 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d0e:	4805      	ldr	r0, [pc, #20]	; (8007d24 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d10:	f7ff fe86 	bl	8007a20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d14:	4b02      	ldr	r3, [pc, #8]	; (8007d20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	200006dc 	.word	0x200006dc
 8007d24:	08008780 	.word	0x08008780

08007d28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	6039      	str	r1, [r7, #0]
 8007d32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	4904      	ldr	r1, [pc, #16]	; (8007d48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d38:	4804      	ldr	r0, [pc, #16]	; (8007d4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d3a:	f7ff fe71 	bl	8007a20 <USBD_GetString>
  return USBD_StrDesc;
 8007d3e:	4b02      	ldr	r3, [pc, #8]	; (8007d48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	200006dc 	.word	0x200006dc
 8007d4c:	080087a0 	.word	0x080087a0

08007d50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	6039      	str	r1, [r7, #0]
 8007d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	221a      	movs	r2, #26
 8007d60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d62:	f000 f855 	bl	8007e10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d66:	4b02      	ldr	r3, [pc, #8]	; (8007d70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20000168 	.word	0x20000168

08007d74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	6039      	str	r1, [r7, #0]
 8007d7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d105      	bne.n	8007d92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	4907      	ldr	r1, [pc, #28]	; (8007da8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d8a:	4808      	ldr	r0, [pc, #32]	; (8007dac <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d8c:	f7ff fe48 	bl	8007a20 <USBD_GetString>
 8007d90:	e004      	b.n	8007d9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	4904      	ldr	r1, [pc, #16]	; (8007da8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d96:	4805      	ldr	r0, [pc, #20]	; (8007dac <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d98:	f7ff fe42 	bl	8007a20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d9c:	4b02      	ldr	r3, [pc, #8]	; (8007da8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	200006dc 	.word	0x200006dc
 8007dac:	080087b4 	.word	0x080087b4

08007db0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	6039      	str	r1, [r7, #0]
 8007dba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d105      	bne.n	8007dce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	4907      	ldr	r1, [pc, #28]	; (8007de4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dc6:	4808      	ldr	r0, [pc, #32]	; (8007de8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007dc8:	f7ff fe2a 	bl	8007a20 <USBD_GetString>
 8007dcc:	e004      	b.n	8007dd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	4904      	ldr	r1, [pc, #16]	; (8007de4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dd2:	4805      	ldr	r0, [pc, #20]	; (8007de8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007dd4:	f7ff fe24 	bl	8007a20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dd8:	4b02      	ldr	r3, [pc, #8]	; (8007de4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	200006dc 	.word	0x200006dc
 8007de8:	080087c8 	.word	0x080087c8

08007dec <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	4603      	mov	r3, r0
 8007df4:	6039      	str	r1, [r7, #0]
 8007df6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	220c      	movs	r2, #12
 8007dfc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007dfe:	4b03      	ldr	r3, [pc, #12]	; (8007e0c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	20000158 	.word	0x20000158

08007e10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <Get_SerialNum+0x44>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e1c:	4b0e      	ldr	r3, [pc, #56]	; (8007e58 <Get_SerialNum+0x48>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e22:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <Get_SerialNum+0x4c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d009      	beq.n	8007e4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e36:	2208      	movs	r2, #8
 8007e38:	4909      	ldr	r1, [pc, #36]	; (8007e60 <Get_SerialNum+0x50>)
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 f814 	bl	8007e68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e40:	2204      	movs	r2, #4
 8007e42:	4908      	ldr	r1, [pc, #32]	; (8007e64 <Get_SerialNum+0x54>)
 8007e44:	68b8      	ldr	r0, [r7, #8]
 8007e46:	f000 f80f 	bl	8007e68 <IntToUnicode>
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	1fff7590 	.word	0x1fff7590
 8007e58:	1fff7594 	.word	0x1fff7594
 8007e5c:	1fff7598 	.word	0x1fff7598
 8007e60:	2000016a 	.word	0x2000016a
 8007e64:	2000017a 	.word	0x2000017a

08007e68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	4613      	mov	r3, r2
 8007e74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	75fb      	strb	r3, [r7, #23]
 8007e7e:	e027      	b.n	8007ed0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	0f1b      	lsrs	r3, r3, #28
 8007e84:	2b09      	cmp	r3, #9
 8007e86:	d80b      	bhi.n	8007ea0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	0f1b      	lsrs	r3, r3, #28
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	4619      	mov	r1, r3
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	440b      	add	r3, r1
 8007e98:	3230      	adds	r2, #48	; 0x30
 8007e9a:	b2d2      	uxtb	r2, r2
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	e00a      	b.n	8007eb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	0f1b      	lsrs	r3, r3, #28
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	4619      	mov	r1, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	440b      	add	r3, r1
 8007eb0:	3237      	adds	r2, #55	; 0x37
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	011b      	lsls	r3, r3, #4
 8007eba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ebc:	7dfb      	ldrb	r3, [r7, #23]
 8007ebe:	005b      	lsls	r3, r3, #1
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	75fb      	strb	r3, [r7, #23]
 8007ed0:	7dfa      	ldrb	r2, [r7, #23]
 8007ed2:	79fb      	ldrb	r3, [r7, #7]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d3d3      	bcc.n	8007e80 <IntToUnicode+0x18>
  }
}
 8007ed8:	bf00      	nop
 8007eda:	371c      	adds	r7, #28
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08a      	sub	sp, #40	; 0x28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eec:	f107 0314 	add.w	r3, r7, #20
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	605a      	str	r2, [r3, #4]
 8007ef6:	609a      	str	r2, [r3, #8]
 8007ef8:	60da      	str	r2, [r3, #12]
 8007efa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f04:	d15c      	bne.n	8007fc0 <HAL_PCD_MspInit+0xdc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f06:	4b30      	ldr	r3, [pc, #192]	; (8007fc8 <HAL_PCD_MspInit+0xe4>)
 8007f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f0a:	4a2f      	ldr	r2, [pc, #188]	; (8007fc8 <HAL_PCD_MspInit+0xe4>)
 8007f0c:	f043 0301 	orr.w	r3, r3, #1
 8007f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f12:	4b2d      	ldr	r3, [pc, #180]	; (8007fc8 <HAL_PCD_MspInit+0xe4>)
 8007f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8007f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f24:	2300      	movs	r3, #0
 8007f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007f2c:	f107 0314 	add.w	r3, r7, #20
 8007f30:	4619      	mov	r1, r3
 8007f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f36:	f7f9 fbc1 	bl	80016bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8007f3a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f40:	2302      	movs	r3, #2
 8007f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f44:	2300      	movs	r3, #0
 8007f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f4c:	230a      	movs	r3, #10
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f50:	f107 0314 	add.w	r3, r7, #20
 8007f54:	4619      	mov	r1, r3
 8007f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f5a:	f7f9 fbaf 	bl	80016bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f5e:	4b1a      	ldr	r3, [pc, #104]	; (8007fc8 <HAL_PCD_MspInit+0xe4>)
 8007f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f62:	4a19      	ldr	r2, [pc, #100]	; (8007fc8 <HAL_PCD_MspInit+0xe4>)
 8007f64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f6a:	4b17      	ldr	r3, [pc, #92]	; (8007fc8 <HAL_PCD_MspInit+0xe4>)
 8007f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f76:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <HAL_PCD_MspInit+0xe4>)
 8007f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d114      	bne.n	8007fac <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f82:	4b11      	ldr	r3, [pc, #68]	; (8007fc8 <HAL_PCD_MspInit+0xe4>)
 8007f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f86:	4a10      	ldr	r2, [pc, #64]	; (8007fc8 <HAL_PCD_MspInit+0xe4>)
 8007f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8007f8e:	4b0e      	ldr	r3, [pc, #56]	; (8007fc8 <HAL_PCD_MspInit+0xe4>)
 8007f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f96:	60bb      	str	r3, [r7, #8]
 8007f98:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007f9a:	f7fa ff93 	bl	8002ec4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f9e:	4b0a      	ldr	r3, [pc, #40]	; (8007fc8 <HAL_PCD_MspInit+0xe4>)
 8007fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa2:	4a09      	ldr	r2, [pc, #36]	; (8007fc8 <HAL_PCD_MspInit+0xe4>)
 8007fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8007faa:	e001      	b.n	8007fb0 <HAL_PCD_MspInit+0xcc>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007fac:	f7fa ff8a 	bl	8002ec4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	2043      	movs	r0, #67	; 0x43
 8007fb6:	f7f9 fa3e 	bl	8001436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007fba:	2043      	movs	r0, #67	; 0x43
 8007fbc:	f7f9 fa57 	bl	800146e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007fc0:	bf00      	nop
 8007fc2:	3728      	adds	r7, #40	; 0x28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	40021000 	.word	0x40021000

08007fcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	f7fe fd8f 	bl	8006b06 <USBD_LL_SetupStage>
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	4613      	mov	r3, r2
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	440b      	add	r3, r1
 8008010:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	4619      	mov	r1, r3
 800801a:	f7fe fdbf 	bl	8006b9c <USBD_LL_DataOutStage>
}
 800801e:	bf00      	nop
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	460b      	mov	r3, r1
 8008030:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008038:	78fa      	ldrb	r2, [r7, #3]
 800803a:	6879      	ldr	r1, [r7, #4]
 800803c:	4613      	mov	r3, r2
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	1a9b      	subs	r3, r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	440b      	add	r3, r1
 8008046:	3348      	adds	r3, #72	; 0x48
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	4619      	mov	r1, r3
 800804e:	f7fe fe16 	bl	8006c7e <USBD_LL_DataInStage>
}
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b082      	sub	sp, #8
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008068:	4618      	mov	r0, r3
 800806a:	f7fe ff29 	bl	8006ec0 <USBD_LL_SOF>
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800807e:	2301      	movs	r3, #1
 8008080:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	2b02      	cmp	r3, #2
 8008088:	d001      	beq.n	800808e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800808a:	f7f8 fdf3 	bl	8000c74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008094:	7bfa      	ldrb	r2, [r7, #15]
 8008096:	4611      	mov	r1, r2
 8008098:	4618      	mov	r0, r3
 800809a:	f7fe fed6 	bl	8006e4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fe fe8f 	bl	8006dc8 <USBD_LL_Reset>
}
 80080aa:	bf00      	nop
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	6812      	ldr	r2, [r2, #0]
 80080ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080ce:	f043 0301 	orr.w	r3, r3, #1
 80080d2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe fec5 	bl	8006e6a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d005      	beq.n	80080f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080e8:	4b04      	ldr	r3, [pc, #16]	; (80080fc <HAL_PCD_SuspendCallback+0x48>)
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	4a03      	ldr	r2, [pc, #12]	; (80080fc <HAL_PCD_SuspendCallback+0x48>)
 80080ee:	f043 0306 	orr.w	r3, r3, #6
 80080f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	e000ed00 	.word	0xe000ed00

08008100 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800811a:	f023 0301 	bic.w	r3, r3, #1
 800811e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d007      	beq.n	8008138 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008128:	4b08      	ldr	r3, [pc, #32]	; (800814c <HAL_PCD_ResumeCallback+0x4c>)
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	4a07      	ldr	r2, [pc, #28]	; (800814c <HAL_PCD_ResumeCallback+0x4c>)
 800812e:	f023 0306 	bic.w	r3, r3, #6
 8008132:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008134:	f000 fae6 	bl	8008704 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800813e:	4618      	mov	r0, r3
 8008140:	f7fe fea8 	bl	8006e94 <USBD_LL_Resume>
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	e000ed00 	.word	0xe000ed00

08008150 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008162:	78fa      	ldrb	r2, [r7, #3]
 8008164:	4611      	mov	r1, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fed1 	bl	8006f0e <USBD_LL_IsoOUTIncomplete>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008186:	78fa      	ldrb	r2, [r7, #3]
 8008188:	4611      	mov	r1, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe feb2 	bl	8006ef4 <USBD_LL_IsoINIncomplete>
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe febe 	bl	8006f28 <USBD_LL_DevConnected>
}
 80081ac:	bf00      	nop
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe febb 	bl	8006f3e <USBD_LL_DevDisconnected>
}
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d13c      	bne.n	800825a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80081e0:	4a20      	ldr	r2, [pc, #128]	; (8008264 <USBD_LL_Init+0x94>)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a1e      	ldr	r2, [pc, #120]	; (8008264 <USBD_LL_Init+0x94>)
 80081ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081f0:	4b1c      	ldr	r3, [pc, #112]	; (8008264 <USBD_LL_Init+0x94>)
 80081f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80081f8:	4b1a      	ldr	r3, [pc, #104]	; (8008264 <USBD_LL_Init+0x94>)
 80081fa:	2206      	movs	r2, #6
 80081fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80081fe:	4b19      	ldr	r3, [pc, #100]	; (8008264 <USBD_LL_Init+0x94>)
 8008200:	2202      	movs	r2, #2
 8008202:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008204:	4b17      	ldr	r3, [pc, #92]	; (8008264 <USBD_LL_Init+0x94>)
 8008206:	2202      	movs	r2, #2
 8008208:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800820a:	4b16      	ldr	r3, [pc, #88]	; (8008264 <USBD_LL_Init+0x94>)
 800820c:	2200      	movs	r2, #0
 800820e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008210:	4b14      	ldr	r3, [pc, #80]	; (8008264 <USBD_LL_Init+0x94>)
 8008212:	2200      	movs	r2, #0
 8008214:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008216:	4b13      	ldr	r3, [pc, #76]	; (8008264 <USBD_LL_Init+0x94>)
 8008218:	2200      	movs	r2, #0
 800821a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800821c:	4b11      	ldr	r3, [pc, #68]	; (8008264 <USBD_LL_Init+0x94>)
 800821e:	2200      	movs	r2, #0
 8008220:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008222:	4b10      	ldr	r3, [pc, #64]	; (8008264 <USBD_LL_Init+0x94>)
 8008224:	2200      	movs	r2, #0
 8008226:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008228:	4b0e      	ldr	r3, [pc, #56]	; (8008264 <USBD_LL_Init+0x94>)
 800822a:	2200      	movs	r2, #0
 800822c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800822e:	480d      	ldr	r0, [pc, #52]	; (8008264 <USBD_LL_Init+0x94>)
 8008230:	f7f9 fd4d 	bl	8001cce <HAL_PCD_Init>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800823a:	f7f8 fd1b 	bl	8000c74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800823e:	2180      	movs	r1, #128	; 0x80
 8008240:	4808      	ldr	r0, [pc, #32]	; (8008264 <USBD_LL_Init+0x94>)
 8008242:	f7fa fd96 	bl	8002d72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008246:	2240      	movs	r2, #64	; 0x40
 8008248:	2100      	movs	r1, #0
 800824a:	4806      	ldr	r0, [pc, #24]	; (8008264 <USBD_LL_Init+0x94>)
 800824c:	f7fa fd4a 	bl	8002ce4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008250:	2280      	movs	r2, #128	; 0x80
 8008252:	2101      	movs	r1, #1
 8008254:	4803      	ldr	r0, [pc, #12]	; (8008264 <USBD_LL_Init+0x94>)
 8008256:	f7fa fd45 	bl	8002ce4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	200008dc 	.word	0x200008dc

08008268 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800827e:	4618      	mov	r0, r3
 8008280:	f7f9 fe49 	bl	8001f16 <HAL_PCD_Start>
 8008284:	4603      	mov	r3, r0
 8008286:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b03      	cmp	r3, #3
 800828c:	d816      	bhi.n	80082bc <USBD_LL_Start+0x54>
 800828e:	a201      	add	r2, pc, #4	; (adr r2, 8008294 <USBD_LL_Start+0x2c>)
 8008290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008294:	080082a5 	.word	0x080082a5
 8008298:	080082ab 	.word	0x080082ab
 800829c:	080082b1 	.word	0x080082b1
 80082a0:	080082b7 	.word	0x080082b7
    case HAL_OK :
      usb_status = USBD_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	73fb      	strb	r3, [r7, #15]
    break;
 80082a8:	e00b      	b.n	80082c2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082aa:	2302      	movs	r3, #2
 80082ac:	73fb      	strb	r3, [r7, #15]
    break;
 80082ae:	e008      	b.n	80082c2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082b0:	2301      	movs	r3, #1
 80082b2:	73fb      	strb	r3, [r7, #15]
    break;
 80082b4:	e005      	b.n	80082c2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082b6:	2302      	movs	r3, #2
 80082b8:	73fb      	strb	r3, [r7, #15]
    break;
 80082ba:	e002      	b.n	80082c2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80082bc:	2302      	movs	r3, #2
 80082be:	73fb      	strb	r3, [r7, #15]
    break;
 80082c0:	bf00      	nop
  }
  return usb_status;
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	4608      	mov	r0, r1
 80082d6:	4611      	mov	r1, r2
 80082d8:	461a      	mov	r2, r3
 80082da:	4603      	mov	r3, r0
 80082dc:	70fb      	strb	r3, [r7, #3]
 80082de:	460b      	mov	r3, r1
 80082e0:	70bb      	strb	r3, [r7, #2]
 80082e2:	4613      	mov	r3, r2
 80082e4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082f4:	78bb      	ldrb	r3, [r7, #2]
 80082f6:	883a      	ldrh	r2, [r7, #0]
 80082f8:	78f9      	ldrb	r1, [r7, #3]
 80082fa:	f7fa fa04 	bl	8002706 <HAL_PCD_EP_Open>
 80082fe:	4603      	mov	r3, r0
 8008300:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b03      	cmp	r3, #3
 8008306:	d817      	bhi.n	8008338 <USBD_LL_OpenEP+0x6c>
 8008308:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <USBD_LL_OpenEP+0x44>)
 800830a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830e:	bf00      	nop
 8008310:	08008321 	.word	0x08008321
 8008314:	08008327 	.word	0x08008327
 8008318:	0800832d 	.word	0x0800832d
 800831c:	08008333 	.word	0x08008333
    case HAL_OK :
      usb_status = USBD_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]
    break;
 8008324:	e00b      	b.n	800833e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008326:	2302      	movs	r3, #2
 8008328:	73fb      	strb	r3, [r7, #15]
    break;
 800832a:	e008      	b.n	800833e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800832c:	2301      	movs	r3, #1
 800832e:	73fb      	strb	r3, [r7, #15]
    break;
 8008330:	e005      	b.n	800833e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008332:	2302      	movs	r3, #2
 8008334:	73fb      	strb	r3, [r7, #15]
    break;
 8008336:	e002      	b.n	800833e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008338:	2302      	movs	r3, #2
 800833a:	73fb      	strb	r3, [r7, #15]
    break;
 800833c:	bf00      	nop
  }
  return usb_status;
 800833e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008362:	78fa      	ldrb	r2, [r7, #3]
 8008364:	4611      	mov	r1, r2
 8008366:	4618      	mov	r0, r3
 8008368:	f7fa fa35 	bl	80027d6 <HAL_PCD_EP_Close>
 800836c:	4603      	mov	r3, r0
 800836e:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	2b03      	cmp	r3, #3
 8008374:	d816      	bhi.n	80083a4 <USBD_LL_CloseEP+0x5c>
 8008376:	a201      	add	r2, pc, #4	; (adr r2, 800837c <USBD_LL_CloseEP+0x34>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	0800838d 	.word	0x0800838d
 8008380:	08008393 	.word	0x08008393
 8008384:	08008399 	.word	0x08008399
 8008388:	0800839f 	.word	0x0800839f
    case HAL_OK :
      usb_status = USBD_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]
    break;
 8008390:	e00b      	b.n	80083aa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008392:	2302      	movs	r3, #2
 8008394:	73fb      	strb	r3, [r7, #15]
    break;
 8008396:	e008      	b.n	80083aa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008398:	2301      	movs	r3, #1
 800839a:	73fb      	strb	r3, [r7, #15]
    break;
 800839c:	e005      	b.n	80083aa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800839e:	2302      	movs	r3, #2
 80083a0:	73fb      	strb	r3, [r7, #15]
    break;
 80083a2:	e002      	b.n	80083aa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80083a4:	2302      	movs	r3, #2
 80083a6:	73fb      	strb	r3, [r7, #15]
    break;
 80083a8:	bf00      	nop
  }
  return usb_status;  
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ce:	78fa      	ldrb	r2, [r7, #3]
 80083d0:	4611      	mov	r1, r2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fa fac4 	bl	8002960 <HAL_PCD_EP_SetStall>
 80083d8:	4603      	mov	r3, r0
 80083da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d816      	bhi.n	8008410 <USBD_LL_StallEP+0x5c>
 80083e2:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <USBD_LL_StallEP+0x34>)
 80083e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e8:	080083f9 	.word	0x080083f9
 80083ec:	080083ff 	.word	0x080083ff
 80083f0:	08008405 	.word	0x08008405
 80083f4:	0800840b 	.word	0x0800840b
    case HAL_OK :
      usb_status = USBD_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	73fb      	strb	r3, [r7, #15]
    break;
 80083fc:	e00b      	b.n	8008416 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083fe:	2302      	movs	r3, #2
 8008400:	73fb      	strb	r3, [r7, #15]
    break;
 8008402:	e008      	b.n	8008416 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008404:	2301      	movs	r3, #1
 8008406:	73fb      	strb	r3, [r7, #15]
    break;
 8008408:	e005      	b.n	8008416 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800840a:	2302      	movs	r3, #2
 800840c:	73fb      	strb	r3, [r7, #15]
    break;
 800840e:	e002      	b.n	8008416 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008410:	2302      	movs	r3, #2
 8008412:	73fb      	strb	r3, [r7, #15]
    break;
 8008414:	bf00      	nop
  }
  return usb_status;  
 8008416:	7bfb      	ldrb	r3, [r7, #15]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800843a:	78fa      	ldrb	r2, [r7, #3]
 800843c:	4611      	mov	r1, r2
 800843e:	4618      	mov	r0, r3
 8008440:	f7fa faf0 	bl	8002a24 <HAL_PCD_EP_ClrStall>
 8008444:	4603      	mov	r3, r0
 8008446:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	2b03      	cmp	r3, #3
 800844c:	d816      	bhi.n	800847c <USBD_LL_ClearStallEP+0x5c>
 800844e:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <USBD_LL_ClearStallEP+0x34>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	08008465 	.word	0x08008465
 8008458:	0800846b 	.word	0x0800846b
 800845c:	08008471 	.word	0x08008471
 8008460:	08008477 	.word	0x08008477
    case HAL_OK :
      usb_status = USBD_OK;
 8008464:	2300      	movs	r3, #0
 8008466:	73fb      	strb	r3, [r7, #15]
    break;
 8008468:	e00b      	b.n	8008482 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800846a:	2302      	movs	r3, #2
 800846c:	73fb      	strb	r3, [r7, #15]
    break;
 800846e:	e008      	b.n	8008482 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008470:	2301      	movs	r3, #1
 8008472:	73fb      	strb	r3, [r7, #15]
    break;
 8008474:	e005      	b.n	8008482 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008476:	2302      	movs	r3, #2
 8008478:	73fb      	strb	r3, [r7, #15]
    break;
 800847a:	e002      	b.n	8008482 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800847c:	2302      	movs	r3, #2
 800847e:	73fb      	strb	r3, [r7, #15]
    break;
 8008480:	bf00      	nop
  }
  return usb_status; 
 8008482:	7bfb      	ldrb	r3, [r7, #15]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800849e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80084a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	da0b      	bge.n	80084c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80084a8:	78fb      	ldrb	r3, [r7, #3]
 80084aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084ae:	68f9      	ldr	r1, [r7, #12]
 80084b0:	4613      	mov	r3, r2
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	1a9b      	subs	r3, r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	440b      	add	r3, r1
 80084ba:	333e      	adds	r3, #62	; 0x3e
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	e00b      	b.n	80084d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084c6:	68f9      	ldr	r1, [r7, #12]
 80084c8:	4613      	mov	r3, r2
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	1a9b      	subs	r3, r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	440b      	add	r3, r1
 80084d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084fe:	78fa      	ldrb	r2, [r7, #3]
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f7fa f8da 	bl	80026bc <HAL_PCD_SetAddress>
 8008508:	4603      	mov	r3, r0
 800850a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	2b03      	cmp	r3, #3
 8008510:	d816      	bhi.n	8008540 <USBD_LL_SetUSBAddress+0x5c>
 8008512:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <USBD_LL_SetUSBAddress+0x34>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	08008529 	.word	0x08008529
 800851c:	0800852f 	.word	0x0800852f
 8008520:	08008535 	.word	0x08008535
 8008524:	0800853b 	.word	0x0800853b
    case HAL_OK :
      usb_status = USBD_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
    break;
 800852c:	e00b      	b.n	8008546 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800852e:	2302      	movs	r3, #2
 8008530:	73fb      	strb	r3, [r7, #15]
    break;
 8008532:	e008      	b.n	8008546 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008534:	2301      	movs	r3, #1
 8008536:	73fb      	strb	r3, [r7, #15]
    break;
 8008538:	e005      	b.n	8008546 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800853a:	2302      	movs	r3, #2
 800853c:	73fb      	strb	r3, [r7, #15]
    break;
 800853e:	e002      	b.n	8008546 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008540:	2302      	movs	r3, #2
 8008542:	73fb      	strb	r3, [r7, #15]
    break;
 8008544:	bf00      	nop
  }
  return usb_status;  
 8008546:	7bfb      	ldrb	r3, [r7, #15]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	607a      	str	r2, [r7, #4]
 800855a:	461a      	mov	r2, r3
 800855c:	460b      	mov	r3, r1
 800855e:	72fb      	strb	r3, [r7, #11]
 8008560:	4613      	mov	r3, r2
 8008562:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008572:	893b      	ldrh	r3, [r7, #8]
 8008574:	7af9      	ldrb	r1, [r7, #11]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	f7fa f9b5 	bl	80028e6 <HAL_PCD_EP_Transmit>
 800857c:	4603      	mov	r3, r0
 800857e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8008580:	7dbb      	ldrb	r3, [r7, #22]
 8008582:	2b03      	cmp	r3, #3
 8008584:	d816      	bhi.n	80085b4 <USBD_LL_Transmit+0x64>
 8008586:	a201      	add	r2, pc, #4	; (adr r2, 800858c <USBD_LL_Transmit+0x3c>)
 8008588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858c:	0800859d 	.word	0x0800859d
 8008590:	080085a3 	.word	0x080085a3
 8008594:	080085a9 	.word	0x080085a9
 8008598:	080085af 	.word	0x080085af
    case HAL_OK :
      usb_status = USBD_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	75fb      	strb	r3, [r7, #23]
    break;
 80085a0:	e00b      	b.n	80085ba <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085a2:	2302      	movs	r3, #2
 80085a4:	75fb      	strb	r3, [r7, #23]
    break;
 80085a6:	e008      	b.n	80085ba <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085a8:	2301      	movs	r3, #1
 80085aa:	75fb      	strb	r3, [r7, #23]
    break;
 80085ac:	e005      	b.n	80085ba <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085ae:	2302      	movs	r3, #2
 80085b0:	75fb      	strb	r3, [r7, #23]
    break;
 80085b2:	e002      	b.n	80085ba <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80085b4:	2302      	movs	r3, #2
 80085b6:	75fb      	strb	r3, [r7, #23]
    break;
 80085b8:	bf00      	nop
  }
  return usb_status;    
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	607a      	str	r2, [r7, #4]
 80085ce:	461a      	mov	r2, r3
 80085d0:	460b      	mov	r3, r1
 80085d2:	72fb      	strb	r3, [r7, #11]
 80085d4:	4613      	mov	r3, r2
 80085d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085e6:	893b      	ldrh	r3, [r7, #8]
 80085e8:	7af9      	ldrb	r1, [r7, #11]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	f7fa f93d 	bl	800286a <HAL_PCD_EP_Receive>
 80085f0:	4603      	mov	r3, r0
 80085f2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80085f4:	7dbb      	ldrb	r3, [r7, #22]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d816      	bhi.n	8008628 <USBD_LL_PrepareReceive+0x64>
 80085fa:	a201      	add	r2, pc, #4	; (adr r2, 8008600 <USBD_LL_PrepareReceive+0x3c>)
 80085fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008600:	08008611 	.word	0x08008611
 8008604:	08008617 	.word	0x08008617
 8008608:	0800861d 	.word	0x0800861d
 800860c:	08008623 	.word	0x08008623
    case HAL_OK :
      usb_status = USBD_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	75fb      	strb	r3, [r7, #23]
    break;
 8008614:	e00b      	b.n	800862e <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008616:	2302      	movs	r3, #2
 8008618:	75fb      	strb	r3, [r7, #23]
    break;
 800861a:	e008      	b.n	800862e <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800861c:	2301      	movs	r3, #1
 800861e:	75fb      	strb	r3, [r7, #23]
    break;
 8008620:	e005      	b.n	800862e <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008622:	2302      	movs	r3, #2
 8008624:	75fb      	strb	r3, [r7, #23]
    break;
 8008626:	e002      	b.n	800862e <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8008628:	2302      	movs	r3, #2
 800862a:	75fb      	strb	r3, [r7, #23]
    break;
 800862c:	bf00      	nop
  }
  return usb_status; 
 800862e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <HAL_PCDEx_LPM_Callback+0x18>
 800864a:	2b01      	cmp	r3, #1
 800864c:	d01f      	beq.n	800868e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800864e:	e03b      	b.n	80086c8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a1b      	ldr	r3, [r3, #32]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d007      	beq.n	8008668 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008658:	f000 f854 	bl	8008704 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800865c:	4b1c      	ldr	r3, [pc, #112]	; (80086d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	4a1b      	ldr	r2, [pc, #108]	; (80086d0 <HAL_PCDEx_LPM_Callback+0x98>)
 8008662:	f023 0306 	bic.w	r3, r3, #6
 8008666:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6812      	ldr	r2, [r2, #0]
 8008676:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800867a:	f023 0301 	bic.w	r3, r3, #1
 800867e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe fc04 	bl	8006e94 <USBD_LL_Resume>
    break;
 800868c:	e01c      	b.n	80086c8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	6812      	ldr	r2, [r2, #0]
 800869c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086a0:	f043 0301 	orr.w	r3, r3, #1
 80086a4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe fbdc 	bl	8006e6a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086ba:	4b05      	ldr	r3, [pc, #20]	; (80086d0 <HAL_PCDEx_LPM_Callback+0x98>)
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	4a04      	ldr	r2, [pc, #16]	; (80086d0 <HAL_PCDEx_LPM_Callback+0x98>)
 80086c0:	f043 0306 	orr.w	r3, r3, #6
 80086c4:	6113      	str	r3, [r2, #16]
    break;   
 80086c6:	bf00      	nop
}
 80086c8:	bf00      	nop
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	e000ed00 	.word	0xe000ed00

080086d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80086dc:	4b03      	ldr	r3, [pc, #12]	; (80086ec <USBD_static_malloc+0x18>)
}
 80086de:	4618      	mov	r0, r3
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	200001cc 	.word	0x200001cc

080086f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]

}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008708:	f7f7 ff26 	bl	8000558 <SystemClock_Config>
}
 800870c:	bf00      	nop
 800870e:	bd80      	pop	{r7, pc}

08008710 <__libc_init_array>:
 8008710:	b570      	push	{r4, r5, r6, lr}
 8008712:	4e0d      	ldr	r6, [pc, #52]	; (8008748 <__libc_init_array+0x38>)
 8008714:	4c0d      	ldr	r4, [pc, #52]	; (800874c <__libc_init_array+0x3c>)
 8008716:	1ba4      	subs	r4, r4, r6
 8008718:	10a4      	asrs	r4, r4, #2
 800871a:	2500      	movs	r5, #0
 800871c:	42a5      	cmp	r5, r4
 800871e:	d109      	bne.n	8008734 <__libc_init_array+0x24>
 8008720:	4e0b      	ldr	r6, [pc, #44]	; (8008750 <__libc_init_array+0x40>)
 8008722:	4c0c      	ldr	r4, [pc, #48]	; (8008754 <__libc_init_array+0x44>)
 8008724:	f000 f820 	bl	8008768 <_init>
 8008728:	1ba4      	subs	r4, r4, r6
 800872a:	10a4      	asrs	r4, r4, #2
 800872c:	2500      	movs	r5, #0
 800872e:	42a5      	cmp	r5, r4
 8008730:	d105      	bne.n	800873e <__libc_init_array+0x2e>
 8008732:	bd70      	pop	{r4, r5, r6, pc}
 8008734:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008738:	4798      	blx	r3
 800873a:	3501      	adds	r5, #1
 800873c:	e7ee      	b.n	800871c <__libc_init_array+0xc>
 800873e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008742:	4798      	blx	r3
 8008744:	3501      	adds	r5, #1
 8008746:	e7f2      	b.n	800872e <__libc_init_array+0x1e>
 8008748:	08008830 	.word	0x08008830
 800874c:	08008830 	.word	0x08008830
 8008750:	08008830 	.word	0x08008830
 8008754:	08008834 	.word	0x08008834

08008758 <memset>:
 8008758:	4402      	add	r2, r0
 800875a:	4603      	mov	r3, r0
 800875c:	4293      	cmp	r3, r2
 800875e:	d100      	bne.n	8008762 <memset+0xa>
 8008760:	4770      	bx	lr
 8008762:	f803 1b01 	strb.w	r1, [r3], #1
 8008766:	e7f9      	b.n	800875c <memset+0x4>

08008768 <_init>:
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	bf00      	nop
 800876c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876e:	bc08      	pop	{r3}
 8008770:	469e      	mov	lr, r3
 8008772:	4770      	bx	lr

08008774 <_fini>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	bf00      	nop
 8008778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800877a:	bc08      	pop	{r3}
 800877c:	469e      	mov	lr, r3
 800877e:	4770      	bx	lr
